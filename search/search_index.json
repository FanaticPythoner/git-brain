{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Brain Documentation!","text":"<p>Brain: Git Extension for Code Sharing without Duplication.</p> <p>Brain is a Git extension designed to facilitate the sharing of code modules or assets\u2014termed \"neurons\"\u2014between different Git repositories. Instead of relying on submodules or manual copying, Brain allows consumer repositories to link to specific files or directories from central \"brain\" repositories. These neurons can then be synchronized, ensuring that consumer projects stay up-to-date with the shared code, while also providing mechanisms for controlled contributions back to the brain.</p> <p>Version: 0.1.0 (as per <code>brain/__init__.py</code>)</p> <p>License: GNU General Public License v3.0 (GPLv3) (as per <code>setup.py</code>)</p>"},{"location":"#introduction","title":"Introduction","text":""},{"location":"#what-is-brain","title":"What is Brain?","text":"<p>In collaborative software development, especially across multiple projects or teams, the need to share common utilities, libraries, configurations, or assets arises frequently. Traditional methods like copy-pasting lead to divergence and maintenance nightmares. Git submodules can be complex to manage. Brain offers a solution by treating shared code entities as \"neurons\" that are version-controlled in dedicated \"brain\" repositories and selectively \"mapped\" into consumer repositories.</p> <p>Brain integrates with your standard Git workflow, augmenting commands like <code>pull</code>, <code>push</code>, <code>clone</code>, <code>status</code>, <code>checkout</code>, and <code>init</code> with neuron-aware operations, while also providing its own suite of commands for managing brains and neurons.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Centralized Code, Local Integration: Share code from central brain repositories. Neurons are physically present (copied) into the consumer's working directory during synchronization.</li> <li>Granular Sharing: Share individual files or entire directories as neurons.</li> <li>Git-Native Workflow: Brain commands are extensions of Git. Standard Git operations are augmented to be neuron-aware.</li> <li>Configuration-Driven: Behavior is controlled by two simple INI files (using case-sensitive keys):<ul> <li><code>.brain</code> (in brain repositories): Defines brain ID, description, and what can be shared (<code>[EXPORT]</code> section) with <code>readonly</code> or <code>readwrite</code> permissions.</li> <li><code>.neurons</code> (in consumer repositories): Defines which brains to connect to (<code>[BRAIN:&lt;brain_id&gt;]</code> sections), how neurons are mapped (<code>[MAP]</code> section), and synchronization policies (<code>[SYNC_POLICY]</code>).</li> </ul> </li> <li>Conflict Management: Strategies for handling discrepancies between local neuron modifications and updates from the brain (e.g., <code>prefer_brain</code>, <code>prefer_local</code>, <code>prompt</code> which uses <code>git merge-file</code> for text).</li> <li>Permission Control (Conceptual &amp; Partial): Brain repositories can define <code>readonly</code> or <code>readwrite</code> permissions for exported neurons in <code>.brain</code>. The consumer's <code>ALLOW_PUSH_TO_BRAIN</code> policy in <code>.neurons</code> governs export.</li> <li>Two-Way Synchronization (Optional &amp; Governed): Consumers can export modifications made to neurons back to the brain repository if policies allow (consumer's <code>ALLOW_PUSH_TO_BRAIN=true</code>). The neuron's <code>readwrite</code> status in the brain's <code>.brain</code> file is a key intended part of this governance, though not fully enforced on export by current <code>export_neurons_to_brain</code> logic.</li> <li>Requirements Merging (Python): Special handling for Python <code>requirements.txt</code> files, allowing neuron-specific dependencies to be merged into the consumer's main requirements file during sync.</li> </ul>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#api-reference-internal-modules","title":"API Reference (Internal Modules)","text":"<p>While \"Brain\" is primarily a command-line tool, its internal modules provide foundational functionalities. This section briefly touches upon key functions and classes within those modules, mainly for developers looking to understand or extend Brain. Note that some functions, especially in <code>brain.config</code>, might raise specific exceptions like <code>BrainConfigError</code> or <code>NeuronsConfigError</code> on issues like file not found or parsing problems, rather than returning <code>None</code> as might be implied by <code>Optional</code> in some older signature comments. The descriptions below reflect observed behavior.</p>"},{"location":"api_reference/#brainconfig","title":"<code>brain.config</code>","text":"<p>Handles loading and saving of <code>.brain</code> (brain repository configuration) and <code>.neurons</code> (consumer repository configuration) files. These files are INI-style and parsed with case-sensitive keys.</p> <ul> <li> <p><code>load_brain_config(file_path: str = '.brain') -&gt; Dict[str, Any]</code></p> <ul> <li>Loads and parses a <code>.brain</code> file.</li> <li>Sections &amp; Keys Processed:<ul> <li><code>[BRAIN]</code>: <code>ID</code> (required, string), <code>DESCRIPTION</code> (optional, string).</li> <li><code>[EXPORT]</code>: Required. Maps path patterns (strings) to permissions (<code>readonly</code> or <code>readwrite</code>). If permission is not specified (e.g., <code>path =</code>), it defaults to <code>readonly</code>.</li> <li><code>[ACCESS]</code>: Optional. Maps entity identifiers (strings) to comma-separated lists of export path patterns. <code>*</code> is treated as a literal string.</li> <li><code>[UPDATE_POLICY]</code>: Optional. Parses known boolean-like values (<code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code>, <code>1</code>, <code>0</code>) to Python booleans. <code>PROTECTED_PATHS</code> is parsed as a list of strings. Other keys are stored as strings.</li> </ul> </li> <li>Raises <code>BrainConfigError</code> if the file is not found, required sections/keys are missing, or parsing fails.</li> </ul> </li> <li> <p><code>save_brain_config(config: Dict[str, Any], file_path: str = '.brain') -&gt; None</code></p> <ul> <li>Saves a brain configuration dictionary to a <code>.brain</code> file.</li> <li>Writes boolean values as 'true' or 'false'. Lists are saved as comma-separated strings.</li> </ul> </li> <li> <p><code>load_neurons_config(file_path: str = '.neurons') -&gt; Dict[str, Any]</code></p> <ul> <li>Loads and parses a <code>.neurons</code> file. Reads with UTF-8 encoding.</li> <li>Sections &amp; Keys Processed:<ul> <li><code>[BRAIN:&lt;brain_id&gt;]</code>: Defines connections. <code>&lt;brain_id&gt;</code> is extracted from the section name.<ul> <li><code>REMOTE</code>: Required, non-empty string (URL of the brain repository).</li> <li><code>BRANCH</code>: Optional, string (branch to track). If absent in the file, it's not defaulted by <code>load_neurons_config</code> itself; consuming code (e.g., <code>add_neuron.py</code>) often defaults to 'main' if the key is missing from the loaded config dict.</li> <li><code>ARGS</code>: Optional, string (additional Git arguments, parsed but not actively used by current core sync logic for <code>temp_clone_repo</code>).</li> </ul> </li> <li><code>[SYNC_POLICY]</code>: Optional. If present, updates default policy values. Keys are uppercased internally.<ul> <li>Known boolean keys (<code>AUTO_SYNC_ON_PULL</code>, <code>ALLOW_LOCAL_MODIFICATIONS</code>, <code>ALLOW_PUSH_TO_BRAIN</code>, <code>AUTO_SYNC_ON_CHECKOUT</code>) are parsed to Python booleans.</li> <li>Other keys (e.g., <code>CONFLICT_STRATEGY</code>) are stored as strings.</li> <li>Default policies if section or key is missing: <code>AUTO_SYNC_ON_PULL=True</code>, <code>CONFLICT_STRATEGY='prompt'</code>, <code>ALLOW_LOCAL_MODIFICATIONS=False</code>, <code>ALLOW_PUSH_TO_BRAIN=False</code>, <code>AUTO_SYNC_ON_CHECKOUT=False</code>.</li> </ul> </li> <li><code>[MAP]</code>: Section is required. Defines neuron mappings.<ul> <li>Format: <code>key_name = brain_id::source_path::destination_path</code></li> <li>Alternate format (if only one brain is defined): <code>key_name = source_path::destination_path</code> (uses the single defined brain_id).</li> <li>Parses into a list of dictionaries, each containing <code>brain_id</code>, <code>source</code>, <code>destination</code>, and <code>_map_key</code> (the original key from the INI file). Validates that parts are non-empty and <code>brain_id</code> is known.</li> </ul> </li> </ul> </li> <li>Raises <code>NeuronsConfigError</code> if the file is not found, required sections/keys are missing (e.g., <code>[MAP]</code> section, <code>REMOTE</code> in brain definition), or parsing fails.</li> </ul> </li> <li> <p><code>save_neurons_config(config: Dict[str, Any], file_path: str = '.neurons') -&gt; None</code></p> <ul> <li>Saves a neurons configuration dictionary to a <code>.neurons</code> file with UTF-8 encoding.</li> <li>Boolean values in <code>SYNC_POLICY</code> are saved as 'true' or 'false'.</li> <li><code>MAP</code> entries are written using <code>_map_key</code> if available, otherwise <code>map{i}</code> is generated as the key.</li> </ul> </li> <li> <p><code>get_current_repo_neurons_config() -&gt; Optional[Dict[str, Any]]</code></p> <ul> <li>Loads <code>.neurons</code> from the current working directory using <code>load_neurons_config()</code>.</li> <li>Re-raises <code>NeuronsConfigError</code> if <code>load_neurons_config</code> fails (e.g., file not found or parsing error).</li> <li>Correction: Based on <code>load_neurons_config</code> raising <code>NeuronsConfigError</code> for file not found, this function will not return <code>None</code> if the file is absent but will raise instead.</li> </ul> </li> <li> <p><code>get_current_repo_brain_config() -&gt; Optional[Dict[str, Any]]</code></p> <ul> <li>Loads <code>.brain</code> from the current working directory using <code>load_brain_config()</code>.</li> <li>Re-raises <code>BrainConfigError</code> if <code>load_brain_config</code> fails.</li> <li>Correction: Similar to above, this will raise on file not found.</li> </ul> </li> <li> <p><code>is_brain_repo() -&gt; bool</code></p> <ul> <li>Checks if a <code>.brain</code> file exists in the current working directory.</li> </ul> </li> <li> <p><code>is_neuron_repo() -&gt; bool</code></p> <ul> <li>Checks if a <code>.neurons</code> file exists in the current working directory.</li> </ul> </li> <li> <p>Exceptions: <code>BrainConfigError</code>, <code>NeuronsConfigError</code></p> </li> </ul>"},{"location":"api_reference/#braingit","title":"<code>brain.git</code>","text":"<p>Provides Git command execution and utility functions using <code>subprocess</code>.</p> <ul> <li> <p><code>run_git_command(args: List[str], cwd: Optional[str] = None, timeout_seconds: Optional[int] = 60) -&gt; str</code></p> <ul> <li>Executes a Git command (e.g., <code>args=['status', '--porcelain']</code>).</li> <li>Returns <code>stdout</code> as a string (stripped of trailing whitespace).</li> <li>Raises <code>GitError</code> on non-zero exit code, timeout, or if <code>git</code> executable is not found.</li> </ul> </li> <li> <p><code>is_git_repo(path: str = '.') -&gt; bool</code></p> <ul> <li>Checks if the given path is within a Git working tree or is a bare repository. Uses <code>git rev-parse --is-inside-work-tree</code> and <code>git rev-parse --is-bare-repository</code>.</li> </ul> </li> <li> <p><code>is_bare_repo(repo_path: str) -&gt; bool</code></p> <ul> <li>Checks if the <code>repo_path</code> is a bare Git repository using <code>git rev-parse --is-bare-repository</code>.</li> <li>Returns <code>False</code> if <code>repo_path</code> is not a Git repository (based on \"not a git repository\" in error message). Raises <code>GitError</code> for other Git command issues.</li> </ul> </li> <li> <p><code>get_repo_root(path: str = '.') -&gt; str</code></p> <ul> <li>Returns the absolute path to the root of the Git repository containing <code>path</code>. Uses <code>git rev-parse --show-toplevel</code>.</li> </ul> </li> <li> <p><code>is_file_tracked(file_path: str, cwd: Optional[str] = None) -&gt; bool</code></p> <ul> <li>Checks if <code>file_path</code> is tracked by Git. Uses <code>git ls-files --error-unmatch &lt;file_path&gt;</code>. Returns <code>False</code> if command fails (e.g. file not tracked, or other git error).</li> </ul> </li> <li> <p><code>is_file_modified(file_path: str, cwd: Optional[str] = None) -&gt; bool</code></p> <ul> <li>Checks if <code>file_path</code> has modifications in the working tree or staging area. Uses <code>git status --porcelain &lt;file_path&gt;</code>. Any output from <code>git status --porcelain</code> for the file means some kind of status change. Returns <code>False</code> on <code>GitError</code>.</li> </ul> </li> <li> <p><code>get_file_hash(file_path: str, cwd: Optional[str] = None) -&gt; str</code></p> <ul> <li>Returns the Git blob hash of <code>file_path</code> as it exists in the <code>HEAD</code> commit. Uses <code>git rev-parse HEAD:&lt;file_path&gt;</code>. Raises <code>GitError</code> if file not in HEAD or other Git error.</li> </ul> </li> <li> <p><code>get_changed_files(cwd: Optional[str] = None) -&gt; List[str]</code></p> <ul> <li>Returns a list of file paths (relative to repository root) that are changed (modified, added, deleted, renamed, copied) in the working tree or staging area. Parses <code>git status --porcelain</code>. Returns empty list on <code>GitError</code>.</li> </ul> </li> <li> <p><code>clone_repo(url: str, target_dir: str, args: Optional[List[str]] = None) -&gt; bool</code></p> <ul> <li>Clones <code>url</code> into <code>target_dir</code> with optional <code>args</code>. Raises <code>GitError</code> on failure. Returns <code>True</code> on success (as failure raises exception).</li> </ul> </li> <li> <p><code>temp_clone_repo(url: str, branch: Optional[str] = None) -&gt; str</code></p> <ul> <li>Clones a repository into a temporary directory. Returns the path to this directory.</li> <li>Uses shallow clone (<code>--depth=1 --quiet</code>) for remote URLs (URLs not starting with <code>file://</code> and not identified as local absolute directory paths). Uses full, quiet clone for local URLs.</li> <li>Cleans up the temporary directory on failure. Provides enhanced error messages for GitHub authentication issues.</li> </ul> </li> <li> <p><code>is_github_url(url: str) -&gt; bool</code></p> <ul> <li>Heuristically checks if a URL is a GitHub URL (HTTPS or SSH, including SCP-like syntax).</li> </ul> </li> <li> <p><code>is_auth_error(error_message: str) -&gt; bool</code></p> <ul> <li>Heuristically checks if a Git error message indicates an authentication/authorization problem by looking for common keywords/patterns.</li> </ul> </li> <li> <p>Exception: <code>GitError</code></p> </li> </ul>"},{"location":"api_reference/#brainsync","title":"<code>brain.sync</code>","text":"<p>Contains the logic for neuron synchronization, conflict resolution,and exporting.</p> <ul> <li> <p><code>sync_neuron(neurons_config: Dict[str, Any], brain_id: str, source_path: str, dest_path: str, repo_path: str = '.') -&gt; Dict[str, Any]</code></p> <ul> <li>Synchronizes a single neuron.</li> <li>Temporarily clones the brain repository using <code>temp_clone_repo</code>.</li> <li>Copies files/directories from brain source to consumer destination.</li> <li>Handles conflicts based on <code>effective_conflict_strategy</code>. This strategy is <code>prefer_brain</code> if <code>ALLOW_LOCAL_MODIFICATIONS</code> is <code>false</code> and <code>CONFLICT_STRATEGY</code> is <code>prompt</code>; otherwise, it's the <code>CONFLICT_STRATEGY</code> from <code>SYNC_POLICY</code>.</li> <li>Merges neuron-specific requirements into the consumer's root <code>requirements.txt</code>. For directory neurons, it looks for <code>requirements.txt</code> or <code>&lt;dirname&gt;requirements.txt</code> inside the neuron's source directory in the brain. For file neurons (<code>neuron_file.py</code>), it looks for an adjacent <code>neuron_file.pyrequirements.txt</code> in the brain.</li> <li>Returns a result dictionary with <code>status</code> ('success'/'error'), <code>action</code> ('added'/'updated'/'unchanged'/'skipped'), <code>message</code>, etc.</li> </ul> </li> <li> <p><code>sync_all_neurons(neurons_config: Dict[str, Any], repo_path: str = '.') -&gt; List[Dict[str, Any]]</code></p> <ul> <li>Iterates through all mappings in <code>neurons_config['MAP']</code> and calls <code>sync_neuron</code> for each valid mapping.</li> <li>Returns a list of result dictionaries from <code>sync_neuron</code>.</li> </ul> </li> <li> <p><code>get_modified_neurons(neurons_config: Dict[str, Any], repo_path: str = '.') -&gt; List[Dict[str, Any]]</code></p> <ul> <li>Identifies consumer neurons whose local paths (as specified in <code>MAP</code>'s <code>destination</code>) correspond to files reported as changed by <code>brain.git.get_changed_files()</code>.</li> <li>A destination path is considered a directory if its mapping ends with <code>/</code> or <code>os.sep</code>, or if it exists on the filesystem as a directory.</li> <li>Returns a list of mapping dictionaries for these modified neurons.</li> </ul> </li> <li> <p><code>export_neurons_to_brain(neurons_config: Dict[str, Any], modified_neurons: List[Dict[str, Any]], repo_path: str = '.', commit_message_override: Optional[str] = None) -&gt; Dict[str, Any]</code></p> <ul> <li>Exports changes from consumer neurons back to their brain repositories.</li> <li>Requires <code>ALLOW_PUSH_TO_BRAIN=true</code> in the consumer's <code>SYNC_POLICY</code>.</li> <li>Groups neurons by <code>brain_id</code>.</li> <li>For local non-bare brains (<code>file://</code> URL, not bare, correct branch, clean working tree): copies changes directly, adds, and commits.</li> <li>For remote/bare brains: temporarily clones the brain, copies changes, adds, commits, and pushes.</li> <li>Important: This function does not re-verify if the neuron has <code>readwrite</code> permission in the brain's <code>.brain</code> file during the export; it relies on the <code>modified_neurons</code> list and the consumer's <code>ALLOW_PUSH_TO_BRAIN</code> policy.</li> <li>Returns a dictionary mapping brain IDs to export results (which include <code>status</code>, <code>message</code>, and <code>exported_neurons</code> list).</li> </ul> </li> <li> <p><code>detect_conflicts(local_content_orig: Union[str, bytes], brain_content_orig: Union[str, bytes]) -&gt; bool</code></p> <ul> <li>Compares byte content. If different, and both are decodable as UTF-8, compares string content. Returns <code>True</code> if different.</li> </ul> </li> <li> <p><code>handle_conflicts(file_path: str, local_content_bytes: bytes, brain_content_bytes: bytes, strategy: str = 'prompt') -&gt; Dict[str, Any]</code></p> <ul> <li>Resolves content conflicts based on strategy:<ul> <li><code>prefer_brain</code>: Returns brain content.</li> <li><code>prefer_local</code>: Returns local content.</li> <li><code>prompt</code>: If non-interactive (<code>not sys.stdin.isatty()</code>), defaults to <code>prefer_brain</code>. Interactively, shows diff (for text files) and prompts user to choose: <code>(b)rain</code>, <code>(l)ocal</code>, or <code>(m)erge</code>. Merge uses <code>git merge-file</code>.</li> </ul> </li> <li>Returns a dictionary with <code>resolution</code> ('brain', 'local', 'merged', 'merged_with_conflicts') and <code>content</code> (bytes).</li> </ul> </li> <li> <p><code>parse_requirements(content: str) -&gt; Dict[str, str]</code></p> <ul> <li>Parses <code>requirements.txt</code>-style content. Returns a dictionary mapping package names to version strings. Only captures version string if <code>==</code> is used (e.g., <code>pkg==1.0</code> -&gt; <code>{'pkg': '1.0'}</code>). For other specifiers (e.g., <code>pkg&gt;=1.0</code>, <code>pkg</code>), the version string is stored as empty.</li> </ul> </li> <li> <p><code>merge_requirements(repo_requirements_content: str, neuron_requirements_content: str) -&gt; str</code></p> <ul> <li>Merges two sets of requirements parsed by <code>parse_requirements</code>.</li> <li>If <code>packaging.version.parse</code> is available and versions are PEP 440 compliant <code>==</code> specifications, it attempts to take the higher version.</li> <li>If versions are not parseable or one is non-specific (<code>\"\"</code>), it generally prefers the neuron's specific version if available, or the repo's if the neuron's is non-specific. If both are non-specific, it remains non-specific. If both are specific but unparseable, it prefers the neuron's if they differ.</li> <li>Returns the merged content as a string, reconstructing <code>name==version</code> lines or just <code>name</code> lines.</li> </ul> </li> <li> <p>Exception: <code>SyncError</code></p> </li> </ul>"},{"location":"api_reference/#brainutils","title":"<code>brain.utils</code>","text":"<p>General utility functions.</p> <ul> <li> <p><code>ensure_directory_exists(path: str) -&gt; None</code></p> <ul> <li>Creates a directory if it doesn't exist, including parent directories (<code>os.makedirs(path, exist_ok=True)</code>).</li> </ul> </li> <li> <p><code>copy_file_or_directory(source: str, destination: str, overwrite: bool = True) -&gt; bool</code></p> <ul> <li>Copies a file or directory. Uses <code>shutil.copytree</code> for directories (removing destination directory first if it exists and <code>overwrite</code> is true) and <code>shutil.copy2</code> for files. Parent directory of <code>destination</code> is created if it doesn't exist.</li> <li>Returns <code>True</code> on success. Returns <code>False</code> if <code>source</code> doesn't exist, or if <code>destination</code> exists and <code>overwrite</code> is <code>False</code>.</li> </ul> </li> <li> <p><code>read_file_content(file_path: str, binary: bool = False) -&gt; Union[str, bytes]</code></p> <ul> <li>Reads file content as text (UTF-8 by default for text mode) or bytes.</li> </ul> </li> <li> <p><code>write_file_content(file_path: str, content: Union[str, bytes], binary: bool = False) -&gt; None</code></p> <ul> <li>Writes content to a file as text (UTF-8 by default for text mode) or bytes. Ensures parent directory exists.</li> </ul> </li> <li> <p><code>parse_mapping(mapping_str: str) -&gt; Tuple[str, str, str]</code></p> <ul> <li>Parses a neuron mapping string \"brain_id::source::destination\" into a 3-tuple. Raises <code>ValueError</code> if format is not three parts separated by <code>::</code>.</li> </ul> </li> <li> <p><code>find_mapping_for_neuron(neurons_config: Dict[str, Any], neuron_path: str) -&gt; Optional[Dict[str, str]]</code></p> <ul> <li>Finds the neuron mapping from <code>neurons_config['MAP']</code> whose <code>destination</code> matches <code>neuron_path</code> (after path normalization).</li> <li>For directory mappings (destination in config ends with <code>/</code>), it checks if the normalized <code>neuron_path</code> starts with the normalized directory path.</li> </ul> </li> <li> <p><code>format_size(size_bytes: int) -&gt; str</code></p> <ul> <li>Formats a byte size into a human-readable string (B, KB, MB, GB) with one decimal place for KB, MB, GB.</li> </ul> </li> </ul>"},{"location":"api_reference/#braincommands","title":"<code>brain.commands.*</code>","text":"<p>Each module in <code>brain.commands</code> (e.g., <code>add_brain.py</code>, <code>sync.py</code>) contains a <code>handle_&lt;command_name&gt;(args: List[str]) -&gt; int</code> function that implements the logic for that specific CLI command. These are orchestrated by <code>brain.cli.main</code>. The exit code is typically <code>0</code> for success and non-zero for errors. <code>argparse</code> within handlers may raise <code>SystemExit</code> on argument errors or for <code>--help</code>.</p>"},{"location":"command_reference/","title":"Command Reference","text":""},{"location":"command_reference/#command-reference","title":"Command Reference","text":"<p>Brain extends Git with several specific commands and augments some standard Git commands.</p>"},{"location":"command_reference/#brain-specific-commands","title":"Brain-Specific Commands","text":"<p>These commands are unique to the Brain extension.</p>"},{"location":"command_reference/#brain-brain-init","title":"<code>brain brain-init</code>","text":"<p>Initializes the current Git repository as a brain repository.</p> <ul> <li>Usage: <code>brain brain-init --id &lt;unique_id&gt; [--description &lt;text&gt;] [--export &lt;path=permission&gt;...]</code></li> <li>Arguments:<ul> <li><code>--id &lt;unique_id&gt;</code>: (Required) A unique identifier for this brain.</li> <li><code>--description &lt;text&gt;</code>: (Optional) A human-readable description for this brain. Defaults to \"Shared code repository\".</li> <li><code>--export &lt;path=permission&gt;</code>: (Optional, can be repeated) Defines a path pattern within the brain that can be exported as a neuron.<ul> <li><code>&lt;path&gt;</code>: The file or directory pattern (e.g., <code>src/*.py</code>, <code>assets/</code>).</li> <li><code>&lt;permission&gt;</code>: Access permission, either <code>readonly</code> or <code>readwrite</code>. If only <code>&lt;path&gt;</code> is provided (e.g., <code>--export path/to/file</code>), it defaults to <code>readonly</code>.</li> </ul> </li> </ul> </li> <li>Behavior:<ul> <li>Creates a <code>.brain</code> file in the current directory.</li> <li>Populates the <code>[BRAIN]</code> section with the <code>ID</code> and <code>DESCRIPTION</code>.</li> <li>Populates the <code>[EXPORT]</code> section based on <code>--export</code> arguments. Each path is stored with its specified permission.</li> <li>Exits with an error (code 1, printed message) if <code>.brain</code> already exists. No <code>--force</code> option is currently implemented.</li> </ul> </li> <li>Example: <code>brain brain-init --id common-libs --export \"utils/*.py=readonly\" --export \"config/defaults.ini=readwrite\"</code></li> </ul>"},{"location":"command_reference/#brain-add-brain","title":"<code>brain add-brain</code>","text":"<p>Adds a remote brain repository to the current consumer repository's configuration.</p> <ul> <li>Usage: <code>brain add-brain &lt;brain_id&gt; &lt;remote_url&gt; [branch]</code></li> <li>Arguments:<ul> <li><code>&lt;brain_id&gt;</code>: A unique alias for this brain within the consumer project.</li> <li><code>&lt;remote_url&gt;</code>: The Git URL of the brain repository (e.g., <code>https://...</code>, <code>git@...</code>, <code>file://...</code>).</li> <li><code>[branch]</code>: (Optional) The branch in the brain repository to track. Defaults to <code>main</code>.</li> </ul> </li> <li>Behavior:<ul> <li>Modifies or creates the <code>.neurons</code> file in the current directory. If <code>.neurons</code> doesn't exist or is invalid, it initializes a new structure with default <code>SYNC_POLICY</code> and empty <code>BRAINS</code> and <code>MAP</code>.</li> <li>Adds a new section <code>[BRAIN:&lt;brain_id&gt;]</code> with <code>REMOTE</code> and <code>BRANCH</code> keys.</li> <li>Verifies the brain repository by attempting a temporary clone using <code>brain.git.temp_clone_repo</code>. If the remote repository does not contain a <code>.brain</code> file at its root, it issues a warning.<ul> <li>If in an interactive session (<code>sys.stdin.isatty()</code>), it prompts the user (\"Continue adding this brain anyway? (y/N):\") before proceeding if <code>.brain</code> is missing.</li> <li>If non-interactive, it proceeds with the warning.</li> </ul> </li> <li>Exits with code 1 if the specified <code>brain_id</code> already exists in the configuration or if the brain repository is inaccessible.</li> </ul> </li> <li>Example: <code>brain add-brain central-assets file:///mnt/shared/git/central-assets-repo feature-branch</code></li> </ul>"},{"location":"command_reference/#brain-add-neuron","title":"<code>brain add-neuron</code>","text":"<p>Adds a neuron mapping from an already-added brain to the consumer repository.</p> <ul> <li>Usage: <code>brain add-neuron &lt;brain_id&gt;::&lt;source_path&gt;::&lt;destination_path&gt;</code></li> <li>Arguments:<ul> <li><code>&lt;mapping_str&gt;</code>: A single string defining the mapping, with parts separated by <code>::</code>.<ul> <li><code>&lt;brain_id&gt;</code>: The alias of the brain (must exist in a <code>[BRAIN:&lt;brain_id&gt;]</code> section in <code>.neurons</code>).</li> <li><code>&lt;source_path&gt;</code>: Path to the file or directory in the brain repository.</li> <li><code>&lt;destination_path&gt;</code>: Path where the neuron will be placed in the consumer repository.</li> </ul> </li> </ul> </li> <li>Behavior:<ul> <li>Loads <code>.neurons</code>. Exits if it's not found or the specified <code>brain_id</code> is not configured.</li> <li>Verifies that <code>&lt;source_path&gt;</code> exists in the specified brain by temporarily cloning the brain. Exits if not found.</li> <li>Updates the <code>[MAP]</code> section in the <code>.neurons</code> file with the new mapping (as <code>brain_id</code>, <code>source</code>, <code>destination</code> dictionary). Avoids adding duplicate identical mappings.</li> <li>Immediately attempts to synchronize the newly added neuron using <code>brain.sync.sync_neuron</code>.</li> </ul> </li> <li>Example: <code>brain add-neuron central-assets::logos/company_logo.svg::static/images/logo.svg</code></li> </ul>"},{"location":"command_reference/#brain-remove-neuron","title":"<code>brain remove-neuron</code>","text":"<p>Removes a neuron mapping from the consumer repository's configuration.</p> <ul> <li>Usage: <code>brain remove-neuron &lt;neuron_path_in_consumer&gt; [--delete]</code></li> <li>Arguments:<ul> <li><code>&lt;neuron_path_in_consumer&gt;</code>: The destination path of the neuron in the consumer repository as specified in the mapping.</li> <li><code>--delete</code>: (Optional flag) If present, the actual neuron file at <code>&lt;neuron_path_in_consumer&gt;</code> will also be deleted from the filesystem using <code>os.unlink()</code>. This only works for files, not directories.</li> </ul> </li> <li>Behavior:<ul> <li>Removes the corresponding entry from the <code>[MAP]</code> list in the <code>.neurons</code> file (matches based on the <code>destination</code> field of mappings).</li> <li>If <code>--delete</code> is used and the path exists as a file, it's unlinked. Errors if it's a directory or <code>os.unlink</code> fails.</li> </ul> </li> <li>Example: <code>brain remove-neuron static/images/logo.svg --delete</code></li> </ul>"},{"location":"command_reference/#brain-sync","title":"<code>brain sync</code>","text":"<p>Synchronizes neurons in the consumer repository with their versions in the brain repositories.</p> <ul> <li>Usage: <code>brain sync [neuron_path_in_consumer...] [--reset] [--strategy &lt;strategy_name&gt;]</code></li> <li>Arguments:<ul> <li><code>[neuron_path_in_consumer...]</code>: (Optional) Space-separated list of neuron destination paths to sync. If omitted, all mapped neurons are synced using <code>brain.sync.sync_all_neurons</code>.</li> <li><code>--reset</code>: (Optional flag) If present, temporarily sets <code>ALLOW_LOCAL_MODIFICATIONS=true</code> in the in-memory <code>neurons_config</code> for this sync operation. This effectively makes the conflict strategy behave like <code>prefer_brain</code> if it was <code>prompt</code> and local modifications were disallowed. It does not directly set <code>CONFLICT_STRATEGY</code> to <code>prefer_brain</code> but influences its behavior when <code>ALLOW_LOCAL_MODIFICATIONS</code> is false.</li> <li><code>--strategy &lt;strategy_name&gt;</code>: (Optional) Overrides the <code>CONFLICT_STRATEGY</code> from <code>.neurons</code> for this sync operation. Valid strategies: <code>prompt</code>, <code>prefer_brain</code>, <code>prefer_local</code>.</li> </ul> </li> <li>Behavior:<ul> <li>For each neuron to be synced (either specified or all):<ul> <li>Uses <code>brain.sync.sync_neuron</code> which fetches the latest version from its brain repository.</li> <li>Compares it with the local version.</li> <li>Handles conflicts based on the effective conflict strategy (see <code>brain.sync.sync_neuron</code> and <code>brain.sync.handle_conflicts</code> for details).</li> <li>Updates the local neuron file(s)/directory.</li> <li>Merges any neuron-specific <code>requirements.txt</code> into the consumer's main <code>requirements.txt</code>.</li> </ul> </li> <li>Reports a summary of actions (added, updated, unchanged, errors).</li> </ul> </li> <li>Example: <code>brain sync src/shared_utils.py --strategy prefer_brain</code></li> </ul>"},{"location":"command_reference/#brain-export","title":"<code>brain export</code>","text":"<p>Exports local changes made to neurons in the consumer repository back to their respective brain repositories.</p> <ul> <li>Usage: <code>brain export [neuron_path_in_consumer...] [--force]</code></li> <li>Arguments:<ul> <li><code>[neuron_path_in_consumer...]</code>: (Optional) Space-separated list of neuron destination paths to export. If omitted, Brain uses <code>brain.sync.get_modified_neurons</code> to find all neurons with local Git changes and attempts to export them.</li> <li><code>--force</code>: (Optional flag) If present, bypasses the interactive confirmation prompt (\"Continue with export? (y/N):\"). It does not bypass the <code>ALLOW_PUSH_TO_BRAIN=false</code> policy check.</li> </ul> </li> <li>Behavior:<ul> <li>Requires <code>ALLOW_PUSH_TO_BRAIN=true</code> in the <code>[SYNC_POLICY]</code> of <code>.neurons</code>. Exits with an error if this is false and <code>--force</code> is not used to bypass confirmation (but still fails if policy is false).</li> <li>For each specified (or detected modified) neuron:<ul> <li>Uses <code>brain.sync.export_neurons_to_brain</code>.</li> <li>If the brain is a local, non-bare repository (and clean, on correct branch), changes are committed directly.</li> <li>Otherwise, temporarily clones the brain, copies neuron content, commits, and pushes to the brain's remote.</li> </ul> </li> <li>Note: The export command itself relies on <code>get_modified_neurons</code> if no paths are provided. The <code>export_neurons_to_brain</code> function does not currently re-validate against the brain's <code>.brain</code> file if a neuron is <code>readwrite</code>; it assumes the <code>modified_neurons</code> list is correct and proceeds if <code>ALLOW_PUSH_TO_BRAIN</code> is true.</li> </ul> </li> <li>Example: <code>brain export config/custom_settings.json</code></li> </ul>"},{"location":"command_reference/#brain-list","title":"<code>brain list</code>","text":"<p>Lists the neurons configured in the current consumer repository.</p> <ul> <li>Usage: <code>brain list [-v | --verbose] [--brain &lt;brain_id&gt;]</code></li> <li>Arguments:<ul> <li><code>-v</code>, <code>--verbose</code>: (Optional flag) Show detailed information, including brain remotes/branches, source paths, neuron status (Modified, Missing, OK based on <code>os.path.exists</code> and <code>brain.git.is_file_modified</code>), and file/directory sizes.</li> <li><code>--brain &lt;brain_id&gt;</code>: (Optional) Filter the list to show only neurons from the specified brain ID.</li> </ul> </li> <li>Behavior: Reads the <code>.neurons</code> file and displays formatted information.</li> <li>Example: <code>brain list --verbose --brain common-utils</code></li> </ul>"},{"location":"command_reference/#standard-git-commands-with-brain-integration","title":"Standard Git Commands with Brain Integration","text":"<p>Brain augments the behavior of several standard Git commands. They are invoked as <code>brain &lt;git_command&gt;</code>.</p>"},{"location":"command_reference/#brain-pull","title":"<code>brain pull</code>","text":"<p>Pulls changes from the consumer repository's remote and then synchronizes neurons.</p> <ul> <li>Usage: <code>brain pull [git_pull_options...]</code></li> <li>Behavior:<ol> <li>Executes <code>git pull</code> with any specified options for the consumer repository.</li> <li>If the pull is successful and <code>AUTO_SYNC_ON_PULL=true</code> in <code>[SYNC_POLICY]</code> of <code>.neurons</code> (default is <code>true</code>), it then performs a full neuron synchronization (equivalent to <code>brain sync</code> for all neurons).</li> </ol> </li> <li>Exit Codes: Returns Git's exit code if <code>git pull</code> fails. Returns 0 on overall success, or 1 if neuron syncing encounters errors or neuron config loading fails.</li> </ul>"},{"location":"command_reference/#brain-push","title":"<code>brain push</code>","text":"<p>Pushes the consumer repository's changes to its remote, with neuron protection and optional export.</p> <ul> <li>Usage: <code>brain push [--push-to-brain] [git_push_options...]</code></li> <li>Arguments:<ul> <li><code>--push-to-brain</code>: (Optional flag) If present, after a successful <code>git push</code> of the consumer repository, Brain will also export any modified neurons (identified by <code>brain.sync.get_modified_neurons</code>) to their respective brain repositories.</li> <li>Other arguments are standard <code>git push</code> options (e.g., <code>--force</code>, <code>-f</code>).</li> </ul> </li> <li>Behavior:<ol> <li>Pre-push checks (if <code>.neurons</code> file exists):<ul> <li>If there are modified neurons (from <code>get_modified_neurons</code>) AND <code>ALLOW_LOCAL_MODIFICATIONS=false</code> in <code>[SYNC_POLICY]</code> AND the push is not forced (i.e., no <code>--force</code> or <code>-f</code> among <code>git_push_options</code>), the command errors out, instructing to reset neurons, change policy, or use <code>--force</code>.</li> <li>If <code>--push-to-brain</code> is used but <code>ALLOW_PUSH_TO_BRAIN=false</code> in <code>[SYNC_POLICY]</code>, it errors out.</li> </ul> </li> <li>Executes <code>git push</code> with filtered arguments (removes <code>--push-to-brain</code>) for the consumer repository.</li> <li>If the <code>git push</code> is successful and <code>--push-to-brain</code> was specified (and <code>neurons_config</code> and <code>modified_neurons</code> are available), it proceeds to export modified neurons using <code>brain.sync.export_neurons_to_brain</code>.</li> </ol> </li> <li>Exit Codes: Returns Git's exit code if <code>git push</code> fails. Returns 0 on success, or 1 if neuron policy checks fail or neuron exporting encounters errors.</li> </ul>"},{"location":"command_reference/#brain-status","title":"<code>brain status</code>","text":"<p>Shows the status of the consumer repository, including the status of neuron files.</p> <ul> <li>Usage: <code>brain status [git_status_options...]</code></li> <li>Arguments: Standard <code>git status</code> options. Brain adds its output after Git's.</li> <li>Behavior:<ol> <li>Executes <code>git status</code> with any specified options.</li> <li>If a <code>.neurons</code> file is present and loaded successfully:<ul> <li>Identifies and lists any mapped neurons that are locally modified (using <code>get_modified_neurons</code>).</li> <li>Provides warnings/notes based on <code>SYNC_POLICY</code> (e.g., if local modifications are disallowed but present, or notes about exporting).</li> <li>If <code>--neuron-mappings</code> or <code>-v</code>/<code>--verbose</code> are passed as arguments to <code>brain status</code>, it lists all configured neuron mappings.</li> </ul> </li> </ol> </li> <li>Exit Codes: Returns Git's exit code on <code>git status</code> failure. Returns 1 if neuron configuration loading fails. Otherwise 0.</li> </ul>"},{"location":"command_reference/#brain-clone","title":"<code>brain clone</code>","text":"<p>Clones a repository and then sets up its neurons if configured.</p> <ul> <li>Usage: <code>brain clone &lt;repository_url&gt; [directory] [git_clone_options...]</code></li> <li>Behavior:<ol> <li>Executes <code>git clone</code> with all provided arguments.</li> <li>If the clone is successful and the cloned repository (path determined from <code>args</code>) contains a <code>.neurons</code> file at its root:<ul> <li>It changes directory into the cloned repository.</li> <li>Loads the <code>.neurons</code> file.</li> <li>Performs a full neuron synchronization (equivalent to <code>brain sync</code> for all neurons using <code>sync_all_neurons</code>).</li> <li>Changes back to the original directory.</li> </ul> </li> </ol> </li> <li>Exit Codes: Returns Git's exit code if <code>git clone</code> fails. Otherwise 0 (even if neuron setup or sync has issues, current code returns 0 after successful clone).</li> </ul>"},{"location":"command_reference/#brain-checkout","title":"<code>brain checkout</code>","text":"<p>Checks out a branch/path and optionally synchronizes neurons.</p> <ul> <li>Usage: <code>brain checkout &lt;branch_or_path...&gt; [--sync-neurons | --no-sync-neurons] [git_checkout_options...]</code></li> <li>Arguments:<ul> <li><code>--sync-neurons</code>: (Brain-specific flag) Force neuron synchronization after checkout.</li> <li><code>--no-sync-neurons</code>: (Brain-specific flag) Prevent neuron synchronization after checkout, even if <code>AUTO_SYNC_ON_CHECKOUT</code> is true.</li> <li>Other arguments are standard <code>git checkout</code> arguments.</li> </ul> </li> <li>Behavior:<ol> <li>Executes <code>git checkout</code> with filtered arguments (Brain-specific flags removed).</li> <li>If the checkout is successful and a <code>.neurons</code> file exists and loads:<ul> <li>Synchronization occurs if (<code>AUTO_SYNC_ON_CHECKOUT=true</code> in <code>[SYNC_POLICY]</code> AND <code>--no-sync-neurons</code> was NOT given) OR if <code>--sync-neurons</code> was explicitly given. <code>AUTO_SYNC_ON_CHECKOUT</code> defaults to <code>false</code> if not in config.</li> </ul> </li> </ol> </li> <li>Exit Codes: Returns Git's exit code if <code>git checkout</code> fails. Returns 1 if neuron configuration loading fails or <code>sync_all_neurons</code> encounters errors. Otherwise 0.</li> </ul>"},{"location":"command_reference/#brain-init","title":"<code>brain init</code>","text":"<p>Initializes a Git repository and can optionally set it up as a brain or with a neuron configuration.</p> <ul> <li>Usage: <code>brain init [directory] [--as-brain] [--brain-id &lt;id&gt;] [--brain-description &lt;desc&gt;] [--with-neurons] [git_init_options...]</code></li> <li>Arguments:<ul> <li><code>[directory]</code>: (Optional) Standard <code>git init</code> directory argument.</li> <li><code>--as-brain</code>: (Brain-specific flag) Initialize as a brain repository.</li> <li><code>--brain-id &lt;id&gt;</code>: (Brain-specific) ID for the brain if <code>--as-brain</code> is used. Defaults to the basename of the repository directory.</li> <li><code>--brain-description &lt;desc&gt;</code>: (Brain-specific) Description for the brain if <code>--as-brain</code> is used. Defaults to \"Brain repository: \". <li><code>--with-neurons</code>: (Brain-specific flag) Initialize with a basic <code>.neurons</code> configuration file.</li> <li>Other arguments are standard <code>git init</code> options, passed through.</li> <li>Behavior:<ol> <li>Executes <code>git init</code> with filtered arguments.</li> <li>If successful, and in the target directory (changes to <code>directory</code> if specified):<ul> <li>If <code>--as-brain</code> is used, creates and populates a <code>.brain</code> file. The <code>[EXPORT]</code> section defaults to <code>* = readonly</code>.</li> <li>If <code>--with-neurons</code> is used, creates a skeleton <code>.neurons</code> file with default <code>SYNC_POLICY</code> and empty <code>BRAINS</code> and <code>MAP</code> sections.</li> </ul> </li> </ol> </li> <li>Exit Codes: Returns Git's exit code if <code>git init</code> fails. Otherwise 0.</li>"},{"location":"command_reference/#other-git-commands","title":"Other Git Commands","text":"<p>Any other Git command (e.g., <code>commit</code>, <code>branch</code>, <code>merge</code>, <code>log</code>) invoked via <code>brain &lt;command&gt; [args]</code> will be passed directly to <code>git &lt;command&gt; [args]</code> by <code>brain.cli.main</code>. Example: <code>brain commit -m \"My changes\"</code> is equivalent to <code>git commit -m \"My changes\"</code>.</p>"},{"location":"configuration_files/","title":"Configuration","text":""},{"location":"configuration_files/#configuration-files","title":"Configuration Files","text":"<p>Brain's behavior is primarily controlled by two INI-style configuration files: <code>.brain</code> (for brain repositories) and <code>.neurons</code> (for consumer repositories). Both files use case-sensitive keys as <code>ConfigParser.optionxform</code> is set to <code>str</code>.</p>"},{"location":"configuration_files/#brain-file","title":"<code>.brain</code> File","text":"<p>Located at the root of a brain repository. Defines the properties of the brain and what it shares.</p> <p>Sections and Keys:</p> <ol> <li> <p><code>[BRAIN]</code> (Required)</p> <ul> <li><code>ID</code>: (Required, String) A unique identifier for this brain. This ID is used by consumers to refer to this brain.     Example: <code>ID = my-shared-library</code></li> <li><code>DESCRIPTION</code>: (Optional, String) A human-readable description of the brain's purpose.     Example: <code>DESCRIPTION = Core utility functions and common assets</code></li> </ul> </li> <li> <p><code>[EXPORT]</code> (Required)     Defines which files or directories within the brain repository can be shared as neurons and their permissions.</p> <ul> <li>Format: <code>&lt;path_pattern_in_brain&gt; = &lt;permission&gt;</code></li> <li><code>&lt;path_pattern_in_brain&gt;</code>: (String) A path relative to the brain repository's root. Can be a file or a directory. Path patterns are stored as literal strings; glob matching interpretation is handled by consuming logic if implemented (not directly by <code>config.py</code> loading).</li> <li><code>&lt;permission&gt;</code>: (String) Specifies how consumers can interact with the neuron.<ul> <li><code>readonly</code> (Default if value is missing or empty string): Consumers can only pull updates.</li> <li><code>readwrite</code>: Consumers can pull updates and, if policies align, export local modifications back to the brain.</li> </ul> </li> <li>Example:     <pre><code>[EXPORT]\nutils/logging.py = readonly\nutils/network.py =\nconfigs/defaults.json = readwrite\nassets/images/ = readonly\n</code></pre>     Here, <code>utils/network.py</code> would default to <code>readonly</code>.</li> </ul> </li> <li> <p><code>[ACCESS]</code> (Optional)     Controls which entities (e.g., users, groups) can access which exported paths. The provided <code>config.py</code> loads this section, but the enforcement logic is not detailed in the current command implementations.</p> <ul> <li>Format: <code>&lt;entity_identifier&gt; = &lt;comma_separated_path_patterns&gt;</code></li> <li><code>&lt;entity_identifier&gt;</code>: (String) An identifier for a user, group, etc. <code>*</code> is a literal.</li> <li><code>&lt;comma_separated_path_patterns&gt;</code>: (String) A comma-separated list of path patterns from the <code>[EXPORT]</code> section. <code>*</code> is a literal. Empty paths are filtered out.</li> <li>Example:     <pre><code>[ACCESS]\nteam-alpha = utils/logging.py, utils/network.py, configs/defaults.json\npublic-consumers = assets/images/\nadmin-group = *\n</code></pre></li> </ul> </li> <li> <p><code>[UPDATE_POLICY]</code> (Optional)     Defines policies for neuron updates or contributions. The provided <code>config.py</code> loads this section, but the enforcement logic is not detailed in current command implementations.</p> <ul> <li>Format: <code>&lt;policy_key&gt; = &lt;value&gt;</code></li> <li>Supported keys and value types (interpreted from <code>config.py</code>):<ul> <li>Boolean keys (e.g., <code>REQUIRE_REVIEW</code>): Parsed from <code>true</code>, <code>yes</code>, <code>1</code> (case-insensitive) to <code>True</code>, and <code>false</code>, <code>no</code>, <code>0</code> to <code>False</code>.</li> <li><code>PROTECTED_PATHS</code>: Parsed as a comma-separated string list.</li> <li>Other keys are stored as stripped strings. Empty values for keys are skipped during loading unless it's a known boolean policy.</li> </ul> </li> <li>Example:     <pre><code>[UPDATE_POLICY]\nREQUIRE_REVIEW = true\nPROTECTED_PATHS = utils/logging.py, core_modules/\nMIN_APPROVERS = 2\nSOME_OTHER_POLICY = some_value\n</code></pre></li> </ul> </li> </ol> <p>Example <code>.brain</code> file: <pre><code>[BRAIN]\nID = common-widgets\nDESCRIPTION = Shared UI widgets for web projects\n\n[EXPORT]\njs/widgets/datepicker.js = readonly\njs/widgets/modal.js = readwrite\ncss/widgets/ = readonly\nassets/widget-icons/*.svg = readonly\n\n[ACCESS]\nfrontend-team = js/widgets/*, css/widgets/*\n\n[UPDATE_POLICY]\nREQUIRE_REVIEW = true\nPROTECTED_PATHS = js/widgets/datepicker.js\n</code></pre></p>"},{"location":"configuration_files/#neurons-file","title":"<code>.neurons</code> File","text":"<p>Located at the root of a consumer repository. Defines connections to brains, neuron mappings, and synchronization policies.</p> <p>Sections and Keys:</p> <ol> <li> <p><code>[BRAIN:&lt;brain_id&gt;]</code> (Required for each brain connection)     Defines a connection to a specific brain repository. <code>&lt;brain_id&gt;</code> is a user-defined alias for the brain within this consumer project.</p> <ul> <li><code>REMOTE</code>: (Required, String) The Git URL of the brain repository. Must be non-empty.     Example: <code>REMOTE = git@github.com:my-org/common-widgets.git</code></li> <li><code>BRANCH</code>: (Optional, String) The specific branch in the brain repository to track. If not specified, consuming code (e.g. <code>add_neuron</code>, <code>sync_neuron</code>) typically defaults to <code>main</code>.     Example: <code>BRANCH = release-v2</code></li> <li><code>ARGS</code>: (Optional, String) Additional arguments intended for Git commands when interacting with this brain. Parsed by <code>config.py</code> but not actively used by <code>temp_clone_repo</code> for passing these args.     Example: <code>ARGS = --depth 1</code></li> </ul> </li> <li> <p><code>[SYNC_POLICY]</code> (Optional, but default values apply if section or keys are absent)     Defines global policies for neuron handling. Default values are used if section or specific keys are missing.</p> <ul> <li><code>AUTO_SYNC_ON_PULL</code>: (Boolean: <code>true</code>/<code>false</code>) Default: <code>True</code>.     Example: <code>AUTO_SYNC_ON_PULL = true</code></li> <li><code>CONFLICT_STRATEGY</code>: (String: <code>prompt</code>/<code>prefer_brain</code>/<code>prefer_local</code>) Default: <code>prompt</code>.     Example: <code>CONFLICT_STRATEGY = prefer_brain</code></li> <li><code>ALLOW_LOCAL_MODIFICATIONS</code>: (Boolean: <code>true</code>/<code>false</code>) Default: <code>False</code>.     Example: <code>ALLOW_LOCAL_MODIFICATIONS = false</code></li> <li><code>ALLOW_PUSH_TO_BRAIN</code>: (Boolean: <code>true</code>/<code>false</code>) Default: <code>False</code>.     Example: <code>ALLOW_PUSH_TO_BRAIN = false</code></li> <li><code>AUTO_SYNC_ON_CHECKOUT</code>: (Boolean: <code>true</code>/<code>false</code>) Default: <code>False</code>.     Example: <code>AUTO_SYNC_ON_CHECKOUT = true</code></li> </ul> </li> <li> <p><code>[MAP]</code> (Required Section)     Defines mappings of neurons. Each entry is a key-value pair. The key name (e.g., <code>map1</code>) is arbitrary but stored as <code>_map_key</code> in the parsed mapping. The value defines the actual mapping.</p> <ul> <li>Format for value: <code>&lt;brain_id&gt;::&lt;source_path_in_brain&gt;::&lt;destination_path_in_consumer&gt;</code><ul> <li>All parts must be non-empty. <code>&lt;brain_id&gt;</code> must be a defined brain.</li> </ul> </li> <li>Alternative Format (if only one brain is defined): <code>&lt;source_path_in_brain&gt;::&lt;destination_path_in_consumer&gt;</code><ul> <li>Brain ID is inferred if exactly one <code>[BRAIN:&lt;brain_id&gt;]</code> section exists.</li> </ul> </li> <li>Example:     <pre><code>[MAP]\nwidget_datepicker = common-widgets::js/widgets/datepicker.js::src/components/shared/datepicker.js\nwidget_modal = common-widgets::js/widgets/modal.js::src/components/shared/modal.js\nwidget_styles = common-widgets::css/widgets/::static/css/shared_widgets/\nicons = assets-brain::icon_set_alpha/::static/icons/vendor_alpha/\n</code></pre></li> </ul> </li> </ol> <p>Example <code>.neurons</code> file: <pre><code>[BRAIN:common-widgets]\nREMOTE = git@github.com:my-org/common-widgets.git\nBRANCH = main\n\n[BRAIN:utility-scripts]\nREMOTE = file:///opt/shared-git-repos/utility-scripts\nBRANCH = master\n\n[SYNC_POLICY]\nAUTO_SYNC_ON_PULL = true\nCONFLICT_STRATEGY = prompt\nALLOW_LOCAL_MODIFICATIONS = false\nALLOW_PUSH_TO_BRAIN = false\nAUTO_SYNC_ON_CHECKOUT = false\n\n[MAP]\ndatepicker_js = common-widgets::js/widgets/datepicker.js::assets/js/vendor/datepicker.js\nmodal_styles = common-widgets::css/widgets/modal.css::assets/css/vendor/modal_style.css\nbackup_script = utility-scripts::backup/do_backup.sh::tools/backup.sh\n</code></pre></p>"},{"location":"core_concepts/","title":"Core Concepts","text":""},{"location":"core_concepts/#core-concepts","title":"Core Concepts","text":"<p>Understanding these core concepts is key to effectively using Brain.</p>"},{"location":"core_concepts/#brain-repository","title":"Brain Repository","text":"<ul> <li>A Brain Repository is a standard Git repository that serves as a central source for shared code or assets (neurons).</li> <li>It is identified by a <code>.brain</code> configuration file at its root.</li> <li>The <code>.brain</code> file specifies:<ul> <li>A unique <code>ID</code> for the brain.</li> <li>An optional <code>DESCRIPTION</code>.</li> <li>An <code>[EXPORT]</code> section detailing which files/directories (neurons) can be shared and their default permissions (<code>readonly</code> or <code>readwrite</code>).</li> <li>Optional <code>[ACCESS]</code> and <code>[UPDATE_POLICY]</code> sections for finer-grained control (these are parsed but their enforcement is not fully implemented in the current command logic).</li> </ul> </li> </ul>"},{"location":"core_concepts/#consumer-repository","title":"Consumer Repository","text":"<ul> <li>A Consumer Repository is any Git project that utilizes neurons from one or more brain repositories.</li> <li>It is identified by a <code>.neurons</code> configuration file at its root.</li> <li>The <code>.neurons</code> file specifies:<ul> <li>Definitions for each brain it connects to under <code>[BRAIN:&lt;brain_id&gt;]</code> sections, including the brain's <code>REMOTE</code> URL and <code>BRANCH</code>.</li> <li>A <code>[SYNC_POLICY]</code> section dictating how neurons are synchronized, conflicts are handled, and if local modifications or exports are permitted.</li> <li>A <code>[MAP]</code> section (required) that defines the explicit mappings between neurons in a brain and their corresponding paths in the consumer repository.</li> </ul> </li> </ul>"},{"location":"core_concepts/#neurons","title":"Neurons","text":"<ul> <li>A Neuron is a file or a directory that is shared from a brain repository.</li> <li>Neurons are defined in the <code>[EXPORT]</code> section of a brain's <code>.brain</code> file, along with their <code>readonly</code> or <code>readwrite</code> permissions.</li> <li>Consumer repositories map these neurons to local paths using the <code>[MAP]</code> section in their <code>.neurons</code> file.</li> <li>When synchronized, the content of the neuron from the brain repository is copied into the consumer repository at the specified destination path.</li> </ul>"},{"location":"core_concepts/#synchronization","title":"Synchronization","text":"<ul> <li>Syncing is the process of updating neurons in the consumer repository with the versions from their respective brain repositories (<code>brain.sync.sync_neuron</code> and <code>sync_all_neurons</code>).</li> <li>This can be triggered automatically (e.g., on <code>brain pull</code> if <code>AUTO_SYNC_ON_PULL=true</code>, on <code>brain checkout</code> if <code>AUTO_SYNC_ON_CHECKOUT=true</code> or <code>--sync-neurons</code> flag is used) or manually (<code>brain sync</code>).</li> <li>Conflict resolution strategies (<code>prefer_brain</code>, <code>prefer_local</code>, <code>prompt</code>) can be defined in the consumer's <code>[SYNC_POLICY]</code> or overridden during a manual <code>brain sync</code>. The <code>prompt</code> strategy uses <code>git merge-file</code> for text files.</li> </ul>"},{"location":"core_concepts/#exporting","title":"Exporting","text":"<ul> <li>Exporting is the process of sending changes made to neurons in a consumer repository back to their source brain repository (<code>brain.sync.export_neurons_to_brain</code>).</li> <li>This is only allowed if <code>ALLOW_PUSH_TO_BRAIN=true</code> in the consumer's <code>[SYNC_POLICY]</code>.</li> <li>The <code>brain export</code> command or <code>brain push --push-to-brain</code> facilitates this.</li> <li>The brain repository receives these changes as new commits.</li> <li>Note: The current export mechanism primarily checks the consumer's <code>ALLOW_PUSH_TO_BRAIN</code> policy. It does not re-verify the <code>readwrite</code> permission of the specific neuron from the brain's <code>.brain</code> file at the time of export.</li> </ul>"},{"location":"developer_guide/","title":"Overview","text":""},{"location":"developer_guide/#developer-guide","title":"Developer Guide","text":"<p>This section provides insights into the internal workings of Brain, primarily derived from <code>sync.py</code>, <code>git.py</code>, and <code>config.py</code>.</p>"},{"location":"developer_guide/#synchronization-logic-brainsync","title":"Synchronization Logic (<code>brain.sync</code>)","text":"<p>The core of Brain's functionality lies in its synchronization mechanism.</p> <ol> <li> <p><code>sync_all_neurons</code>:</p> <ul> <li>Iterates through all valid mappings in the <code>[MAP]</code> section of the <code>neurons_config</code>.</li> <li>For each mapping, calls <code>sync_neuron</code>. Returns a list of results.</li> </ul> </li> <li> <p><code>sync_neuron</code>:</p> <ul> <li>Configuration: Retrieves brain details (URL, branch from <code>BRAINS</code> section) and sync policies (<code>SYNC_POLICY</code>) from the passed <code>neurons_config</code>. Determines the <code>effective_conflict_strategy</code>.</li> <li>Cloning Brain: Performs a temporary clone of the brain repository using <code>brain.git.temp_clone_repo</code>. This is a shallow clone (<code>--depth=1 --quiet</code>) for remote URLs by default.</li> <li>Path Resolution: Determines the full path to the neuron source in the cloned brain and the neuron destination in the consumer repository. Ensures destination parent directory exists.</li> <li>Directory vs. File Sync:<ul> <li>Directory Neuron:<ul> <li>If the consumer destination doesn't exist or is not a directory, it's created/replaced by copying the entire directory tree from the brain source using <code>shutil.copytree</code> (after removing the destination if it's a file, or removing and re-copying if it's an existing directory to ensure a clean state).</li> <li>If the destination directory exists, it walks through the brain's neuron directory. For each file/sub-directory:<ul> <li>Creates corresponding sub-directories in the consumer if they don't exist.</li> <li>For files (excluding the neuron's own <code>requirements.txt</code> if present directly in the neuron source dir), it reads the brain version and the local consumer version (if it exists).</li> <li><code>detect_conflicts</code> is called. If conflicts exist, <code>handle_conflicts</code> is invoked.</li> <li>The consumer's file is updated with the resolved content if it differs from the original local content.</li> </ul> </li> </ul> </li> <li>File Neuron:<ul> <li>The brain's file content is read.</li> <li>If the consumer's destination exists and is a file, <code>detect_conflicts</code> and <code>handle_conflicts</code> are used.</li> <li>The consumer's file is updated if the resolved content differs.</li> <li>If the destination doesn't exist or is a directory (type mismatch), it's created/replaced.</li> </ul> </li> </ul> </li> <li>Requirements Merging:<ul> <li>After syncing the neuron's content, it checks for associated requirements files:<ul> <li>For a directory neuron (e.g., <code>brain_src/my_dir/</code>), it looks for <code>brain_src/my_dir/requirements.txt</code> or <code>brain_src/my_dir/my_dirrequirements.txt</code>.</li> <li>For a file neuron (e.g., <code>brain_src/my_util.py</code>), it looks for <code>brain_src/my_util.pyrequirements.txt</code> adjacent to the neuron file.</li> </ul> </li> <li>If found, <code>parse_requirements</code> reads both the neuron's requirements and the consumer's root <code>requirements.txt</code>.</li> <li><code>merge_requirements</code> combines them (preferring higher <code>==</code> versions if <code>packaging.version</code> can parse, or neuron's version string otherwise if different). The consumer's root <code>requirements.txt</code> is updated.</li> </ul> </li> <li>Cleanup: The temporary brain clone is removed.</li> <li>Result: Returns a dictionary indicating <code>status</code> (<code>success</code>/<code>error</code>), <code>action</code> (<code>added</code>/<code>updated</code>/<code>unchanged</code>/<code>skipped</code>), <code>message</code>, and <code>requirements_merged</code> (boolean).</li> </ul> </li> <li> <p>Conflict Handling (<code>handle_conflicts</code>):</p> <ul> <li>If strategy is <code>prefer_brain</code> or <code>prefer_local</code>, returns the respective content immediately.</li> <li>If <code>prompt</code>:<ul> <li>In non-interactive environments (<code>not sys.stdin.isatty()</code>), defaults to <code>prefer_brain</code>.</li> <li>Interactively:<ul> <li>Shows a diff for text files using <code>difflib.unified_diff</code>.</li> <li>Asks user to choose: <code>(b)rain</code>, <code>(l)ocal</code>, <code>(m)erge</code> (merge only available for text files).</li> <li>Merge option (<code>m</code>): Uses <code>git merge-file</code> with temporary files. The merged output (potentially with conflict markers) becomes the new content.</li> </ul> </li> </ul> </li> <li>Returns a dictionary with <code>resolution</code> and <code>content</code>.</li> </ul> </li> </ol>"},{"location":"developer_guide/#git-operations-braingit","title":"Git Operations (<code>brain.git</code>)","text":"<p>Brain uses a custom <code>run_git_command</code> function that executes Git commands via <code>subprocess.run</code>.</p> <ul> <li><code>temp_clone_repo(url, branch)</code>:<ul> <li>Creates a temporary directory.</li> <li>Determines if the URL is local (<code>file://</code> or an absolute path to an existing directory).</li> <li>Uses shallow clone (<code>--depth=1 --quiet</code>) for remote URLs. For local URLs, it's a full, quiet clone.</li> <li>Handles <code>GitError</code>, providing enhanced messages for GitHub authentication issues by checking <code>is_github_url</code> and <code>is_auth_error</code>.</li> <li>Cleans up the temporary directory on failure.</li> </ul> </li> <li>File Status Checks:<ul> <li><code>is_file_tracked()</code>: Uses <code>git ls-files --error-unmatch &lt;file_path&gt;</code>.</li> <li><code>is_file_modified()</code>: Uses <code>git status --porcelain &lt;file_path&gt;</code>. Any output indicates a change status.</li> <li><code>get_file_hash()</code>: Uses <code>git rev-parse HEAD:&lt;file_path&gt;</code> to get the blob hash from <code>HEAD</code>.</li> </ul> </li> <li><code>get_changed_files()</code>: Parses <code>git status --porcelain</code> output to list all files that are modified, added, deleted, renamed, or copied in the working tree or staging area relative to <code>HEAD</code>. Attempts basic unquoting for paths with spaces.</li> </ul>"},{"location":"developer_guide/#export-logic-brainsyncexport_neurons_to_brain","title":"Export Logic (<code>brain.sync.export_neurons_to_brain</code>)","text":"<ul> <li>Policy Check: Verifies <code>ALLOW_PUSH_TO_BRAIN</code> is <code>true</code> in the consumer's <code>SYNC_POLICY</code>.</li> <li>Grouping: Groups <code>modified_neurons</code> by their <code>brain_id</code>.</li> <li>Processing Each Brain:<ul> <li>Local Non-Bare Brains: If the brain's remote URL is <code>file://</code> and points to a local non-bare Git repository:<ul> <li>Checks if the brain repo is clean (no uncommitted changes) and on the target branch (if a branch is specified in <code>.neurons</code>).</li> <li>If checks pass, modifications are copied directly into this local brain's working tree.</li> <li><code>git add .</code> and <code>git commit</code> are run directly in the local brain repository. No <code>git push</code> is needed.</li> </ul> </li> <li>Remote or Bare Local Brains:<ul> <li>The brain repository is temporarily cloned (using <code>temp_clone_repo</code>).</li> <li>Modified neuron files/directories are copied from the consumer to the corresponding <code>source_path</code> in the temporary clone.</li> <li><code>git add .</code> and <code>git commit</code> are run in the clone.</li> <li><code>git push</code> is run from the clone to the brain's actual remote.</li> </ul> </li> <li>Commit Message: A detailed commit message is generated listing the exported items (source path from brain, destination path from consumer), unless <code>commit_message_override</code> is provided.</li> </ul> </li> <li>Cleanup: The temporary clone (if used) is deleted.</li> <li>Important: The current implementation of <code>export_neurons_to_brain</code> does not re-validate if the neuron is <code>readwrite</code> based on the target Brain's <code>.brain</code> configuration during the export. It relies on the provided <code>modified_neurons</code> list and the consumer's <code>ALLOW_PUSH_TO_BRAIN</code> policy.</li> </ul>"},{"location":"developer_guide/#debugging","title":"Debugging","text":"<p>Both <code>brain.sync</code> and <code>brain.git</code> include debug logging flags (<code>ENABLE_SYNC_DEBUG_LOGGING</code>, <code>ENABLE_GIT_DEBUG_LOGGING</code>). When <code>True</code>, they print messages to <code>sys.stderr</code> via <code>_debug_log_sync</code> and <code>_debug_log_git</code> respectively. These are enabled by default in the provided code.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":"<p>Brain is a Python package and can be installed using <code>pip</code>.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python: Version 3.7 or higher (as per <code>setup.py</code> <code>python_requires=\"&gt;=3.7\"</code>).</li> <li>Git: Brain is a Git extension, so a working Git installation is essential and must be available in your system's PATH.</li> <li>pip: Python's package installer, usually comes with Python.</li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":"<p>To install the <code>git-brain</code> package from PyPI, run the following command in your terminal:</p> <pre><code>pip install git-brain\n</code></pre> <p>This command will download Brain from the Python Package Index (PyPI) and install it along with its dependencies (currently <code>packaging&gt;=20.0</code> as per <code>setup.py</code>).</p>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, you can verify that Brain is correctly installed by checking its help message for a command:</p> <p><pre><code>brain --help\n</code></pre> This should display the main usage information for Brain. Alternatively, try: <pre><code>brain list --help\n</code></pre></p> <p>If Brain is installed correctly, this will display the help message for the <code>list</code> command. If the <code>brain</code> command is not found, ensure that the directory containing Python scripts (pip's <code>bin</code> or <code>Scripts</code> directory, or the relevant virtual environment's <code>bin</code> directory) is in your system's <code>PATH</code>.</p>"},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"quickstart/#quick-start","title":"Quick Start","text":"<p>This quick start guide will walk you through setting up a brain repository, a consumer repository, and performing basic neuron synchronization.</p>"},{"location":"quickstart/#1-creating-a-brain-repository","title":"1. Creating a Brain Repository","text":"<p>A brain repository is a standard Git repository that has been initialized to serve neurons.</p> <pre><code># 1. Create a directory for your shared code\nmkdir our-shared-library\ncd our-shared-library\n\n# 2. Initialize it as a Git repository\n# The demo script uses 'git init -b main'. Adapt if your default is different.\ngit init -b main\n\n# 3. Initialize it as a Brain repository\n# This creates the .brain configuration file.\nbrain brain-init --id our-lib --description \"Our company's shared utility library\"\n\n# 4. Configure exportable neurons in the .brain file\n# Open .brain and define what can be shared.\n# Example content for .brain:\n#   [BRAIN]\n#   ID = our-lib\n#   DESCRIPTION = Our company's shared utility library\n#\n#   [EXPORT]\n#   # path_in_brain_repo = permission (readonly or readwrite)\n#   utils/common.py = readonly\n#   assets/branding/ = readonly\n#   config/api_keys_template.json = readwrite\n#\n# For this quick start, let's use echo to create it:\necho \"[BRAIN]\" &gt; .brain\necho \"ID = our-lib\" &gt;&gt; .brain\necho \"DESCRIPTION = Our company's shared utility library\" &gt;&gt; .brain\necho \"\" &gt;&gt; .brain\necho \"[EXPORT]\" &gt;&gt; .brain\necho \"utils/common.py = readonly\" &gt;&gt; .brain\necho \"assets/branding/ = readonly\" &gt;&gt; .brain\necho \"config/api_keys_template.json = readwrite\" &gt;&gt; .brain\n\n# 5. Create the actual shared files and directories\nmkdir -p utils\necho \"# Shared Python utilities v1\" &gt; utils/common.py\n\nmkdir -p assets/branding\necho \"CompanyLogo-v1\" &gt; assets/branding/logo.svg\n\nmkdir -p config\necho '{ \"SERVICE_API_KEY\": \"YOUR_KEY_HERE\" }' &gt; config/api_keys_template.json\n\n# 6. Add all files to Git and commit\ngit add .\ngit commit -m \"Initial commit of shared library neurons\"\n\n# 7. (Optional) Push to a remote Git server if others need to access it\n# git remote add origin &lt;your-remote-git-server-url&gt;/our-shared-library.git\n# git push -u origin main\n</code></pre> <p>You now have a brain repository named <code>our-lib</code> ready to serve neurons.</p>"},{"location":"quickstart/#2-creating-a-consumer-repository-and-using-neurons","title":"2. Creating a Consumer Repository and Using Neurons","text":"<p>A consumer repository is any Git project that wants to use code from a brain repository.</p> <pre><code># 1. Create a directory for your project (outside the brain repo directory)\ncd .. # Go up from our-shared-library\nmkdir my-application\ncd my-application\n\n# 2. Initialize it as a Git repository\ngit init -b main\n\n# 3. Add the brain repository to your project's configuration\n# Replace &lt;path_to_our-shared-library_repo&gt; with the actual file path or remote URL.\n# For a local brain repository (assuming our-shared-library is a sibling directory):\nBRAIN_REPO_PATH_ABS=$(cd ../our-shared-library &amp;&amp; pwd)\nbrain add-brain our-lib \"file://${BRAIN_REPO_PATH_ABS}\" main\n# This command creates/updates the .neurons file.\n\n# 4. Add specific neurons from the brain to your project\n# Format: brain add-neuron &lt;brain_id&gt;::&lt;path_in_brain&gt;::&lt;path_in_consumer&gt;\nbrain add-neuron our-lib::utils/common.py::src/shared/common_utils.py\nbrain add-neuron our-lib::assets/branding/::static/branding_assets/\n\n# These commands update .neurons and immediately sync the neuron files.\n\n# 5. Verify the neuron files are present\nls src/shared/\nls static/branding_assets/\ncat src/shared/common_utils.py\n\n# 6. Add the .neurons file and the synced neuron files to Git and commit\ngit add .\ngit commit -m \"Added neurons from our-lib\"\n</code></pre> <p>Your application now uses <code>common.py</code> and the branding assets from <code>our-shared-library</code>.</p>"},{"location":"quickstart/#3-daily-workflow-example","title":"3. Daily Workflow Example","text":""},{"location":"quickstart/#a-updating-a-neuron-in-the-brain-repository","title":"a. Updating a Neuron in the Brain Repository","text":"<pre><code># Navigate to the brain repository\ncd ../our-shared-library\n\n# Modify a shared file\necho \"# Shared Python utilities v2 - added new_function\" &gt;&gt; utils/common.py\ngit add utils/common.py\ngit commit -m \"Updated common.py with new_function\"\n\n# (Optional) Push changes if it's a remote brain\n# git push origin main\n</code></pre>"},{"location":"quickstart/#b-synchronizing-neurons-in-the-consumer-repository","title":"b. Synchronizing Neurons in the Consumer Repository","text":"<pre><code># Navigate to the consumer repository\ncd ../my-application\n\n# Pull changes from your project's origin and sync neurons\n# The `brain pull` command first performs a `git pull` for the consumer\n# repository, then, if AUTO_SYNC_ON_PULL is true (default), it syncs neurons.\nbrain pull\n\n# Alternatively, to just sync neurons without pulling the consumer repo:\n# brain sync\n\n# Verify the neuron update\ncat src/shared/common_utils.py\n# This should now show \"# Shared Python utilities v2...\"\n\n# If AUTO_SYNC_ON_PULL=false in .neurons, you'd run `brain sync` manually after `git pull`.\n</code></pre>"},{"location":"quickstart/#c-modifying-a-neuron-potentially-readwrite-and-exporting","title":"c. Modifying a Neuron (Potentially <code>readwrite</code>) and Exporting","text":"<p>Let's assume <code>config/api_keys_template.json</code> was mapped as a neuron (and its definition in the brain's <code>.brain</code> file allows <code>readwrite</code>).</p> <pre><code># In the consumer repository (my-application)\n# First, map the neuron if you haven't\nbrain add-neuron our-lib::config/api_keys_template.json::app_config/api_keys.json\n\n# To enable export, you need to configure .neurons:\n# Open .neurons and under [SYNC_POLICY], ensure/add:\n#   ALLOW_LOCAL_MODIFICATIONS = true  (to avoid warnings/blocks on local changes)\n#   ALLOW_PUSH_TO_BRAIN = true      (to enable `brain export` or `brain push --push-to-brain`)\n#\n# For this demo, you might manually edit .neurons or use a script.\n# The demo script brain_neurons_local_simulation_demo.py directly modifies the .neurons\n# file for project_beta_direct to set these policies.\n\n# Modify the neuron locally\necho '{ \"SERVICE_API_KEY\": \"MY_ACTUAL_KEY_FOR_PROJECT\", \"PROJECT_SPECIFIC_SETTING\": true }' &gt; app_config/api_keys.json\ngit add app_config/api_keys.json\ngit commit -m \"Configured API key for my-application\"\n\n# Export this change back to the brain repository\n# Option 1: Explicit export command\nbrain export app_config/api_keys.json\n\n# Option 2: During push (if you also want to push consumer repo changes)\n# brain push --push-to-brain\n\n# Verify in the brain repository\ncd ../our-shared-library\n# If the brain is local non-bare and export was direct, change is already there.\n# If brain is remote or bare, you'd typically `git pull` in a separate clone of the brain.\ngit log -p config/api_keys_template.json\ncat config/api_keys_template.json\n# This should show the changes made in the consumer.\n# The brain repository will have a new commit for the exported change.\n</code></pre> <p>This quick start covers the fundamental operations. Explore the \"Command Reference\" and \"Configuration Files\" sections for more advanced features and detailed explanations.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p>Command <code>brain</code> not found:</p> <ul> <li>Ensure Brain is installed (<code>pip install git-brain</code>).</li> <li>Verify that the directory containing Python scripts (e.g., <code>~/.local/bin</code> on Linux, Python's <code>Scripts</code> folder on Windows, or your virtual environment's <code>bin</code> directory) is in your system's <code>PATH</code> environment variable.</li> </ul> </li> <li> <p>\"ERROR: No .neurons file found.\" (or similar <code>NeuronsConfigError</code>):</p> <ul> <li>This message appears when running commands like <code>brain add-neuron</code>, <code>brain sync</code>, <code>brain list</code>, etc., in a directory that hasn't been configured as a consumer or where the <code>.neurons</code> file is missing/misnamed.</li> <li>Solution: Ensure you are in the correct consumer repository directory. Run <code>brain add-brain</code> first if no brains have been added yet. For <code>brain init</code> in a new consumer repo, use <code>brain init --with-neurons</code> to create a skeleton <code>.neurons</code> file.</li> </ul> </li> <li> <p>\"ERROR: Brain '' not found in configuration\": <ul> <li>When using <code>brain add-neuron</code>, the specified <code>&lt;brain_id&gt;</code> must match an existing <code>[BRAIN:&lt;brain_id&gt;]</code> section in your <code>.neurons</code> file.</li> <li>Solution: Verify the <code>brain_id</code> in your command and in <code>.neurons</code>. Use <code>brain add-brain</code> if the brain hasn't been added.</li> </ul> <li> <p>\"ERROR: Source path '' not found in brain repository\": <ul> <li>When using <code>brain add-neuron</code> or <code>brain sync</code>, Brain temporarily clones the brain repository to check/get the <code>&lt;source_path&gt;</code>. This error means it doesn't exist there.</li> <li>Solution: Double-check the <code>&lt;source_path&gt;</code> in your command or <code>.neurons</code> mapping. Ensure it's correct and the file/directory exists on the specified <code>BRANCH</code> of the brain repository.</li> </ul> <li> <p>Git Clone/Fetch Failures (e.g., during <code>add-brain</code>, <code>add-neuron</code>, <code>sync</code>, <code>export</code>):</p> <ul> <li>These often manifest as <code>GitError</code> messages from <code>brain.git</code> module functions.</li> <li>Authentication Issues: If the brain URL is private (e.g., private GitHub repo):<ul> <li>For HTTPS URLs: Ensure your Git credential manager is configured, or use a Personal Access Token (PAT) with appropriate permissions.</li> <li>For SSH URLs: Ensure your SSH key is correctly set up and added to your Git provider.</li> <li>The error message from <code>brain.git.temp_clone_repo</code> attempts to provide more specific hints for GitHub authentication errors.</li> </ul> </li> <li>Network Issues: Check your internet connection and firewall settings.</li> <li>Incorrect URL/Branch: Verify the <code>REMOTE</code> URL and <code>BRANCH</code> in your <code>.neurons</code> file for the relevant brain.</li> </ul> </li> <li> <p>Conflicts During Sync:</p> <ul> <li>If <code>CONFLICT_STRATEGY=prompt</code> and you see conflict markers (<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>) after choosing <code>(m)erge</code>, you need to manually edit the file to resolve these conflicts, then <code>git add</code> the resolved file.</li> <li>If <code>CONFLICT_STRATEGY=prefer_brain</code>, your local changes to neurons will be overwritten without prompt.</li> <li>If <code>CONFLICT_STRATEGY=prefer_local</code>, the neuron will not be updated from the brain if local changes exist.</li> </ul> </li> <li> <p>Export Failures (<code>brain export</code> or <code>brain push --push-to-brain</code>):</p> <ul> <li>Policy: Ensure <code>ALLOW_PUSH_TO_BRAIN=true</code> in <code>[SYNC_POLICY]</code> of <code>.neurons</code>. The <code>brain export</code> command will error out if this is <code>false</code> (the <code>--force</code> flag for <code>brain export</code> only bypasses the confirmation prompt, not this policy check).</li> <li>Permissions (Conceptual): While <code>export_neurons_to_brain</code> doesn't currently re-check, the intention is that the neuron should be <code>readwrite</code> in the brain's <code>.brain</code> file's <code>[EXPORT]</code> section.</li> <li>Brain Repo State (for local non-bare brains): If exporting to a local non-bare brain, ensure it has no uncommitted changes and is on the correct branch (as specified in <code>.neurons</code>).</li> <li>Push Failures to Brain Remote: Similar to clone/fetch failures, check authentication and permissions for pushing to the brain's remote repository.</li> </ul> </li> <li> <p>Python <code>packaging</code> module not found:</p> <ul> <li>The <code>sync.py</code> module attempts to use <code>from packaging.version import parse</code>. If this fails (due to <code>ImportError</code>), version comparison for requirements merging becomes less precise (simple string comparison).</li> <li>Solution: Ensure <code>packaging</code> is installed. It's a dependency in <code>setup.py</code> (<code>install_requires=[\"packaging&gt;=20.0\"]</code>), so it should be installed with <code>git-brain</code>. If not, <code>pip install packaging</code>.</li> </ul> </li> <li> <p>\"File is effectively binary for diffing\" during sync conflict prompt:</p> <ul> <li>This means <code>handle_conflicts</code> could not decode either the local or brain version of the file as UTF-8. The <code>(m)erge</code> option will not be available. You can only choose <code>(b)rain</code> or <code>(l)ocal</code>.</li> </ul> </li> <li> <p>Debug Logs:</p> <ul> <li>Brain's <code>git.py</code> and <code>sync.py</code> modules have <code>ENABLE_GIT_DEBUG_LOGGING</code> and <code>ENABLE_SYNC_DEBUG_LOGGING</code> flags, respectively. These are <code>True</code> by default in the provided code. Debug messages are printed to <code>sys.stderr</code> and can be very helpful for diagnosing issues.</li> </ul> </li>"},{"location":"user_guide/","title":"User Guide","text":""},{"location":"user_guide/#user-guide","title":"User Guide","text":"<p>This section provides practical guidance on using Brain for common development tasks.</p>"},{"location":"user_guide/#initializing-repositories","title":"Initializing Repositories","text":""},{"location":"user_guide/#initializing-a-git-repository-with-brain-consumer","title":"Initializing a Git Repository with Brain (Consumer)","text":"<p>If you are starting a new project that will consume neurons:</p> <ol> <li>Initialize a standard Git repository:     '''bash     git init -b main my-new-project     cd my-new-project     '''</li> <li>You can then proceed to add brains and neurons.     The <code>brain init --with-neurons</code> command can create a basic <code>.neurons</code> file structure for you after <code>git init</code>:     '''bash     # After git init in my-new-project     brain init --with-neurons     # This creates a skeleton .neurons file with default SYNC_POLICY and empty BRAINS/MAP.     # You still need to run <code>brain add-brain</code> and <code>brain add-neuron</code>.     '''</li> </ol>"},{"location":"user_guide/#initializing-a-brain-repository","title":"Initializing a Brain Repository","text":"<p>If you are creating a new repository to host shared code:</p> <ol> <li>Initialize a standard Git repository:     '''bash     git init -b main shared-components     cd shared-components     '''</li> <li>Run the <code>brain brain-init</code> command:     '''bash     brain brain-init --id my-components --description \"Shared UI components\" --export \"src/*=readonly\" --export \"config/dev.json=readwrite\"     '''     This creates the <code>.brain</code> file with the specified ID, description, and export rules.</li> <li>Add your shared code, commit, and (optionally) push to a remote.</li> </ol>"},{"location":"user_guide/#managing-brains","title":"Managing Brains","text":""},{"location":"user_guide/#adding-a-brain","title":"Adding a Brain","text":"<p>To connect your consumer repository to a brain repository:</p> <p>'''bash brain add-brain   [branch] ''' <ul> <li><code>&lt;brain_id&gt;</code>: A unique alias for this brain within your consumer project (e.g., <code>shared_utils</code>, <code>design_assets</code>).</li> <li><code>&lt;remote_url&gt;</code>: The Git URL (HTTPS, SSH, or <code>file://</code> for local brains) of the brain repository.</li> <li><code>[branch]</code>: (Optional) The specific branch in the brain repository to track. Defaults to <code>main</code>.</li> </ul> <p>Example: '''bash brain add-brain common-utils git@github.com:my-org/common-utils.git dev ''' This adds a section to <code>.neurons</code>: '''ini [BRAIN:common-utils] REMOTE = git@github.com:my-org/common-utils.git BRANCH = dev ''' Brain verifies the repository and warns if <code>.brain</code> is missing (prompting interactively).</p>"},{"location":"user_guide/#managing-neurons","title":"Managing Neurons","text":""},{"location":"user_guide/#adding-a-neuron-mapping","title":"Adding a Neuron Mapping","text":"<p>Once a brain is added, map neurons from it:</p> <p>'''bash brain add-neuron :::: ''' <ul> <li><code>&lt;brain_id&gt;</code>: The alias defined via <code>brain add-brain</code>.</li> <li><code>&lt;source_path_in_brain&gt;</code>: Path in the brain repository. For directories, ensure consistent use of trailing <code>/</code> if relying on it for type detection in some contexts, though <code>sync_neuron</code> primarily checks <code>os.path.isdir</code> on the brain source.</li> <li><code>&lt;destination_path_in_consumer&gt;</code>: Path in your consumer project. For directories, ensure consistent use of trailing <code>/</code>.</li> </ul> <p>Example: '''bash brain add-neuron common-utils::helpers/strings.py::src/lib/string_helpers.py brain add-neuron common-utils::assets/icons/::static/common_icons/ ''' This updates the <code>[MAP]</code> section in <code>.neurons</code> and immediately syncs the new neuron. Destination directories are created if they don't exist.</p>"},{"location":"user_guide/#listing-neurons","title":"Listing Neurons","text":"<p>To see configured neurons: '''bash brain list ''' Output: ''' Neurons in repository: 2</p> <p>src/lib/string_helpers.py (common-utils)   static/common_icons/ (common-utils) '''</p> <p>For details (status: Modified, Missing, OK; size): '''bash brain list --verbose ''' Filter by brain: <code>brain list --brain=common-utils</code></p>"},{"location":"user_guide/#removing-a-neuron-mapping","title":"Removing a Neuron Mapping","text":"<p>To remove a mapping: '''bash brain remove-neuron  [--delete] ''' *   <code>&lt;path_in_consumer&gt;</code>: Destination path of the neuron. *   <code>--delete</code>: (Optional) Also deletes the local file at <code>&lt;path_in_consumer&gt;</code> (uses <code>os.unlink</code>, fails for directories). <p>Example: <code>brain remove-neuron src/lib/string_helpers.py</code> Removes mapping from <code>.neurons</code>. File remains unless <code>--delete</code> is used.</p>"},{"location":"user_guide/#synchronization-workflow","title":"Synchronization Workflow","text":""},{"location":"user_guide/#pulling-and-automatic-sync","title":"Pulling and Automatic Sync","text":"<p><code>brain pull</code> is recommended: '''bash brain pull [git-pull-arguments] ''' Executes <code>git pull</code>, then (if <code>AUTO_SYNC_ON_PULL=true</code> in <code>.neurons</code>, default is true) syncs all neurons.</p>"},{"location":"user_guide/#manual-synchronization","title":"Manual Synchronization","text":"<p>'''bash brain sync [neuron_path_in_consumer...] [--strategy=] [--reset] ''' *   <code>[neuron_path_in_consumer...]</code>: Syncs only specified neurons. If omitted, syncs all. *   <code>--strategy=&lt;strategy&gt;</code>: Overrides <code>CONFLICT_STRATEGY</code> (<code>prompt</code>, <code>prefer_brain</code>, <code>prefer_local</code>). *   <code>--reset</code>: Temporarily allows local modifications to be overwritten (influences <code>prompt</code> strategy if <code>ALLOW_LOCAL_MODIFICATIONS</code> is false, effectively making it <code>prefer_brain</code>)."},{"location":"user_guide/#conflict-resolution","title":"Conflict Resolution","text":"<p>Handled by <code>brain.sync.handle_conflicts</code> based on effective strategy: *   <code>prompt</code> (default): Interactive choice <code>(b)rain, (l)ocal, (m)erge</code>. <code>(m)erge</code> uses <code>git merge-file</code> for text files. Non-interactive defaults to <code>prefer_brain</code>. *   <code>prefer_brain</code>: Overwrites local changes. *   <code>prefer_local</code>: Keeps local changes.</p> <p>If <code>ALLOW_LOCAL_MODIFICATIONS=false</code> (default) and <code>CONFLICT_STRATEGY=prompt</code>, conflicts are resolved as <code>prefer_brain</code>.</p>"},{"location":"user_guide/#exporting-neuron-changes-to-a-brain","title":"Exporting Neuron Changes to a Brain","text":"<p>If a neuron is intended to be <code>readwrite</code> (defined in brain's <code>.brain</code>) and consumer's <code>.neurons</code> has <code>ALLOW_PUSH_TO_BRAIN=true</code>:</p> <ol> <li>Modify the neuron in your consumer repository.</li> <li>Commit the changes.</li> <li>Export:<ul> <li><code>brain export &lt;path_to_modified_neuron_in_consumer&gt; [--force]</code>     (If no path, exports all Git-detected modified neurons. <code>--force</code> bypasses confirmation, not policy).</li> <li><code>brain push --push-to-brain [git-push-arguments]</code>     (Pushes consumer repo, then exports modified neurons).</li> </ul> </li> </ol> <p>Export process: Clones brain (or uses local non-bare directly), copies changes, commits, and pushes (if not direct local modification).</p>"},{"location":"user_guide/#working-with-multiple-brains","title":"Working with Multiple Brains","text":"<ol> <li>Add each brain:     '''bash     brain add-brain core-services git@github.com:my-org/core-services.git     brain add-brain frontend-assets https://github.com/my-org/frontend-assets.git     '''</li> <li>Add neurons, specifying the <code>brain_id</code>:     '''bash     brain add-neuron core-services::auth/client.py::src/auth_client.py     brain add-neuron frontend-assets::styles/main.css::static/css/theme.css     '''</li> </ol>"},{"location":"user_guide/#special-handling-requirementstxt-python","title":"Special Handling: <code>requirements.txt</code> (Python)","text":"<p>Brain can merge neuron-specific Python dependencies: *   Neuron-Specific Requirements Location:     *   Directory neuron (e.g., <code>my_dir/</code>): <code>my_dir/requirements.txt</code> or <code>my_dir/my_dirrequirements.txt</code> (inside the neuron source in the brain).     *   File neuron (e.g., <code>utils.py</code>): <code>utils.pyrequirements.txt</code> (adjacent to <code>utils.py</code> in the brain). *   Merging: During sync, Brain reads consumer's root <code>requirements.txt</code> and the neuron's requirements.     *   New packages are added.     *   For packages in both, if versions are <code>==</code> and parseable by <code>packaging.version</code>, the higher is chosen. Otherwise, the neuron's version string is preferred if different.     *   Consumer's root <code>requirements.txt</code> is updated.</p>"},{"location":"vision_roadmap/","title":"Vision &amp; Roadmap","text":"<p>Brain (v0.1.0) has established a strong foundation as a language-agnostic Git extension for intelligently sharing and synchronizing versioned files and directories (\"neurons\") from central \"Brain\" repositories to any number of consumer repositories. It currently excels at reducing duplication, managing local vs. remote changes with configurable conflict strategies, and even offers specialized Python dependency merging.</p> <p>Our vision is to evolve Brain into an indispensable tool for governed, scalable, and deeply integrated asset and code synchronization, particularly for teams and enterprises managing complex inter-repository dependencies and striving for consistency.</p>"},{"location":"vision_roadmap/#current-capabilities-v010---alpha","title":"Current Capabilities (v0.1.0 - Alpha)","text":"<p>Foundation: *   Core Model: Central Brain repositories serve versioned Neurons (files or directories) to Consumer repositories. *   Configuration: Driven by <code>.brain</code> (ID, description, export paths with <code>readonly</code>/<code>readwrite</code> permissions) and <code>.neurons</code> (brain connections, sync policies, neuron mappings) INI files. Case-sensitive keys are used. *   Language Agnostic Sync: Any file or folder type can be a Neuron. *   CLI Interface: Comprehensive command suite (<code>brain-init</code>, <code>add-brain</code>, <code>add-neuron</code>, <code>remove-neuron</code>, <code>sync</code>, <code>export</code>, <code>list</code>). *   Git Command Integration: Neuron-aware versions of <code>pull</code>, <code>push</code>, <code>status</code>, <code>clone</code>, <code>checkout</code>, <code>init</code>. *   Conflict Resolution: Strategies (<code>prompt</code>, <code>prefer_brain</code>, <code>prefer_local</code>) with <code>git merge-file</code> for text-based prompts. <code>prompt</code> defaults to <code>prefer_brain</code> in non-interactive sessions. *   Conditional Export: Export of locally modified Neurons back to Brains, governed by the consumer's global <code>ALLOW_PUSH_TO_BRAIN</code> policy. *   Python Dependency Merging: Automatic merging of Neuron-associated <code>requirements.txt</code> into the consumer's root <code>requirements.txt</code>. Specific lookup paths for neuron requirements are:     *   Directory Neuron (e.g., <code>my_dir/</code>): <code>my_dir/requirements.txt</code> or <code>my_dir/my_dirrequirements.txt</code>.     *   File Neuron (e.g., <code>utils.py</code>): <code>utils.pyrequirements.txt</code>. *   Local Brain Optimization for Export: Direct commits to local non-bare Brain repositories during export (if clean and on the correct branch), bypassing clone-push for efficiency.</p> <p>Observed Limitations &amp; Areas for Growth (Based on Current Code): *   <code>[ACCESS]</code> &amp; <code>[UPDATE_POLICY]</code> in <code>.brain</code>: While parsed by <code>config.py</code>, these sections are not yet actively enforced by the command logic (e.g., <code>add-neuron</code>, <code>sync</code>, <code>export</code>). *   Neuron-Level Permission Enforcement During Export: The <code>export_neurons_to_brain</code> function does not currently re-verify a specific neuron's <code>readwrite</code> permission from the target Brain's <code>.brain</code> configuration before committing changes to that Brain. It relies on the <code>modified_neurons</code> list (typically from <code>get_modified_neurons</code>) and the consumer's <code>ALLOW_PUSH_TO_BRAIN</code> policy. *   Granular Neuron Versioning by Consumer: Consumers track a branch of a Brain. There's no built-in mechanism to pin a specific Neuron mapping to an immutable Git commit/tag within the Brain. *   Auditing &amp; Operational Insight: Lacks dedicated audit logs or centralized status reporting beyond Git history and CLI output (though verbose debug logging to stderr is present). *   Advanced Dependency Ecosystems: Python <code>requirements.txt</code> handling is a specialized feature. Generalizing intelligent dependency management is a future goal. *   User/Group Identity for Permissions: The <code>[ACCESS]</code> section implies entity identification, but the mechanism to link these entities to actual Git users/teams is not yet defined. *   Distribution: Currently relies on <code>pip install</code>. Self-contained installers would simplify setup for users less familiar with Python environments.</p>"},{"location":"vision_roadmap/#the-future-vision-evolving-brain","title":"The Future Vision: Evolving Brain","text":"<p>Our roadmap is focused on maturing Brain from a powerful utility into a strategic platform for asset and code management within Git.</p>"},{"location":"vision_roadmap/#phase-1-solidifying-governance-stability--developer-experience-near-term-focus","title":"Phase 1: Solidifying Governance, Stability, &amp; Developer Experience (Near-Term Focus)","text":"<p>This phase aims to build directly upon the existing architecture to deliver features crucial for team and early enterprise adoption, as well as improving the core developer experience.</p> <ol> <li> <p>Full Enforcement of <code>.brain</code> Policies:</p> <ul> <li>Implement <code>[ACCESS]</code> Section Logic:<ul> <li>Goal: Define how <code>&lt;entity_identifier&gt;</code> in the <code>.brain</code> file's <code>[ACCESS]</code> section is resolved (e.g., based on consumer repo URL, user, or other context).</li> <li>Action: Modify <code>add-neuron</code> and <code>sync</code> operations to check consumer context against these rules.</li> <li>Impact: True granular access control.</li> </ul> </li> <li>Implement <code>[UPDATE_POLICY]</code> Section Logic (e.g., <code>PROTECTED_PATHS</code>):<ul> <li>Goal: Enforce policies like <code>PROTECTED_PATHS</code> during <code>brain export</code>.</li> <li>Impact: Adds safety for critical Neurons.</li> </ul> </li> <li>Strict Neuron-Level Permission Enforcement on Export:<ul> <li>Goal: Ensure <code>export_neurons_to_brain</code> verifies a neuron's <code>readwrite</code> permission from the target Brain's <code>.brain</code> config before committing.</li> <li>Impact: Strengthens governance.</li> </ul> </li> </ul> </li> <li> <p>Neuron Version Pinning for Consumers:</p> <ul> <li>Goal: Allow <code>.neurons</code> <code>[MAP]</code> entries to specify a Git commit SHA or tag from the Brain for a Neuron.</li> <li>Syntax Idea: <code>map_key = brain_id::source_path@v1.2.3::dest_path</code> or <code>map_key = brain_id::source_path@commit_sha::dest_path</code></li> <li>Action: Modify <code>sync_neuron</code> to checkout the specific commit/tag in the temporary brain clone. Add <code>brain update-neuron &lt;dest_path&gt; [--version &lt;tag_or_sha&gt; | --latest]</code> command.</li> <li>Impact: Crucial for production stability and reproducible builds in consumers.</li> </ul> </li> <li> <p>Enhanced Conflict Resolution &amp; Diffing:</p> <ul> <li>Goal: Improve the <code>prompt</code> strategy by potentially offering more advanced merge options or integration with external diff/merge tools configured by the user.</li> <li>Impact: Smoother developer experience during conflicts.</li> </ul> </li> <li> <p>Basic Auditing &amp; Operational Logging:</p> <ul> <li>Goal: Implement a local Brain operational log file (e.g., in <code>.git/brain/logs/operation.log</code>) recording key actions, statuses, and errors.</li> <li>Impact: Essential traceability for troubleshooting.</li> </ul> </li> <li> <p>Refined CLI Experience &amp; Distribution:</p> <ul> <li>Goal: Ensure consistent verbose/quiet modes across all commands, clear progress indicators for long operations (like cloning), and add \"dry-run\" flags where applicable (e.g., <code>brain sync --dry-run</code>). Develop self-contained, cross-platform installers (e.g., using PyInstaller, Nuitka) to simplify distribution.</li> <li>Impact: Improved usability, predictability, and wider accessibility.</li> </ul> </li> <li> <p>Integrated Development Environment (IDE) Support - VS Code Extension (Initial):</p> <ul> <li>Goal: Provide an official VS Code extension for Brain.</li> <li>Features (Initial):<ul> <li>Syntax highlighting for <code>.brain</code> and <code>.neurons</code> files.</li> <li>Visual indicators (e.g., gutter icons, file decorations) for files/folders identified as mapped Neurons.</li> <li>Context menu actions or palette commands for common Brain operations (<code>sync selected neuron</code>, <code>sync all</code>, <code>list modified neurons</code>, <code>export neuron</code>).</li> <li>Basic status integration with VS Code's Source Control view (e.g., showing modified neurons).</li> </ul> </li> <li>Impact: Significantly enhances developer productivity by integrating Brain into common workflows.</li> </ul> </li> </ol>"},{"location":"vision_roadmap/#phase-2-scaling-broader-integration--project-maturity-mid-term","title":"Phase 2: Scaling, Broader Integration, &amp; Project Maturity (Mid-Term)","text":"<ol> <li> <p>Performance &amp; Scalability Enhancements:</p> <ul> <li>Goal: Optimize for scenarios with thousands of Neurons, large binary assets, and numerous consumers. This might involve more efficient cloning strategies or delta transfers.</li> <li>Impact: Ensures Brain remains performant at scale.</li> </ul> </li> <li> <p>API for Scripting &amp; Advanced CI/CD Integration:</p> <ul> <li>Goal: Formalize and expose core Brain functionalities as a stable Python API for programmatic use.</li> <li>Action: Refactor command handlers to be more library-friendly, returning structured data instead of just exit codes/print statements.</li> <li>Impact: Enables deep automation, custom tooling, and richer CI/CD pipeline integrations.</li> </ul> </li> <li> <p>Robust CI/CD for Brain Itself:</p> <ul> <li>Goal: Implement a comprehensive Continuous Integration / Continuous Deployment pipeline for the Brain project on a platform like GitHub Actions.</li> <li>Features: Automated testing (unit, integration, E2E potentially using the demo script as a base), linting, code quality checks, automated release packaging for PyPI, and automated building/testing of the self-contained installers.</li> <li>Impact: Ensures project stability, quality, and reliable releases of Brain itself.</li> </ul> </li> <li> <p>Webhook / Notification System (Conceptual):</p> <ul> <li>Goal: Allow Brains to (optionally) notify consumers or trigger external systems (e.g., CI pipelines) when significant changes occur in exported Neurons.</li> <li>Impact: Facilitates proactive updates and automation in consumer projects.</li> </ul> </li> <li> <p>Generalized Dependency Awareness (Research &amp; Prototyping):</p> <ul> <li>Goal: Extend the concept of intelligent dependency-merging beyond Python <code>requirements.txt</code> to other common ecosystems (e.g., <code>package.json</code> for Node.js, <code>pom.xml</code> for Java/Maven, <code>go.mod</code> for Go).</li> <li>Impact: Increases Brain's value for polyglot development environments.</li> </ul> </li> </ol>"},{"location":"vision_roadmap/#phase-3-advanced-enterprise-features--platform-thinking-long-term-vision","title":"Phase 3: Advanced Enterprise Features &amp; Platform Thinking (Long-Term Vision)","text":"<ol> <li> <p>Centralized Brain Discovery &amp; Management (Optional Server Component):</p> <ul> <li>Goal: A web UI/service for organizations to register Brains, manage global policies, browse Neuron catalogs, visualize dependencies, and monitor sync health across consumers.</li> <li>Impact: Elevates Brain to a managed platform, crucial for large organizations.</li> </ul> </li> <li> <p>Advanced Role-Based Access Control (RBAC) &amp; Policy Engine:</p> <ul> <li>Goal: Integrate with enterprise identity systems (LDAP, SAML, OAuth2) for fine-grained permissions on Brains, Neurons, and operations. Implement a more sophisticated policy engine.</li> <li>Impact: Meets stringent enterprise security and governance requirements.</li> </ul> </li> <li> <p>Neuron Lifecycle Management &amp; Semantic Versioning Awareness:</p> <ul> <li>Goal: Introduce explicit Neuron versioning within Brains, support for deprecation workflows, SemVer awareness in Neurons, and allow consumers to pin to version ranges.</li> <li>Impact: Advanced control over Neuron evolution and consumer stability.</li> </ul> </li> </ol>"},{"location":"vision_roadmap/#join-us-in-building-the-future-of-shared-assets","title":"Join Us in Building the Future of Shared Assets","text":"<p>Brain's current Alpha version already solves significant pain points. With the community's involvement and feedback, especially from those tackling complex inter-repository dependencies at scale, we can realize this ambitious vision.</p> <ul> <li>Try Brain: See the Quick Start.</li> <li>Report Issues &amp; Suggest Features: Visit the project's issue tracker.</li> <li>Contribute: Refer to <code>CONTRIBUTING.md</code> (if available) for guidelines.</li> </ul> <p>Let's make managing shared, versioned resources in Git intelligent, reliable, and finally, a pleasure.</p>"}]}